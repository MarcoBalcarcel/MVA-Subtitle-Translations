1
00:00:00,483 --> 00:00:08,466
[Music]

2
00:00:18,216 --> 00:00:20,466
>> Oh, now, see, I was talking for like a minute and a half,

3
00:00:20,483 --> 00:00:22,366
and they didn't turn the cameras on.

4
00:00:22,483 --> 00:00:27,466
So back to what we were doing.

5
00:00:27,483 --> 00:00:28,466
>> There they are.

6
00:00:29,483 --> 00:00:30,466
Where have you been?

7
00:00:30,483 --> 00:00:33,466
>> Where have you been? So here's the deal. We need to work with

8
00:00:33,483 --> 00:00:36,383
the execution policy. Now I just want you to take a quick look

9
00:00:36,466 --> 00:00:40,466
at this slide because it lists the execution policy for us kind

10
00:00:40,483 --> 00:00:42,466
of quick. Now, we have a couple of Cmdlets that will let us work

11
00:00:42,483 --> 00:00:46,466
with the execution policy, and by default, you are restricted.

12
00:00:46,483 --> 00:00:49,466
In other words, no scripty allowed to run.

13
00:00:50,0 --> 00:00:51,200
>> Interactive only.

14
00:00:51,283 --> 00:00:54,466
>> Yeah, and I just want to point out that, see the word under

15
00:00:54,483 --> 00:00:58,466
here called unrestricted. Can we just right now kind of put into

16
00:00:58,483 --> 00:01:01,466
our heads that that's not an option for you to set.

17
00:01:01,483 --> 00:01:05,466
>> Ditto with bypass. Bypass. Because isn't bypass like...

18
00:01:05,483 --> 00:01:09,466
>> Yeah, unrestricted and bypass... so can you kind of... I don't

19
00:01:09,483 --> 00:01:13,300
want you drawing on your computers, but can you just cross those off?

20
00:01:13,383 --> 00:01:15,466
Restricted, unrestricted. Restricted is good...

21
00:01:16,483 --> 00:01:20,466
but no. Cross off unrestricted, bypass. Can we focus on the

22
00:01:20,483 --> 00:01:24,366
two that we really want you to focus on, which is RemoteSigned

23
00:01:25,483 --> 00:01:28,383
and AllSigned. Do you want to talk about...

24
00:01:28,483 --> 00:01:32,466
what is this signed thing in the first place that we're talking about?

25
00:01:32,483 --> 00:01:35,466
>> Yeah, so basically, digital signatures. Now in the past, like

26
00:01:35,483 --> 00:01:38,466
VBScript had this. That was really bad stuff. All it did was

27
00:01:38,483 --> 00:01:43,300
said, hey, if a script is digitally signed, I'll run it, not

28
00:01:43,383 --> 00:01:44,466
digitally signed by someone I trust.

29
00:01:44,483 --> 00:01:45,466
>> Trust, yeah.

30
00:01:46,483 --> 00:01:48,466
>> We took a different approach. We said it has to be digitally

31
00:01:48,483 --> 00:01:50,466
signed, and you have to trust them.

32
00:01:50,483 --> 00:01:53,466
>> So before we talk about the difference between AllSigned and

33
00:01:54,483 --> 00:01:58,166
RemoteSigned, can you show us what it is like to sign a script?

34
00:01:58,250 --> 00:02:02,466
>> Sure. Let me first go... I've created a self-signed certificate,

35
00:02:02,483 --> 00:02:08,466
and if you ever wonder about that, you just say, no self-signed certificate.

36
00:02:08,483 --> 00:02:12,466
You can go create your own. I've already created some, and what

37
00:02:12,483 --> 00:02:14,466
I do is they're in the cert drive. I don't know if we talked

38
00:02:14,483 --> 00:02:17,466
about this. There are these things called providers, get PS drive.

39
00:02:18,483 --> 00:02:22,216
Okay. And you'll see the additional drives like the C drive we've

40
00:02:22,300 --> 00:02:24,466
been showing, but there's a certificate drive.

41
00:02:25,483 --> 00:02:28,466
So what I can do is do a dir of the certificate drive, and I

42
00:02:28,483 --> 00:02:32,466
do tab completion here, current user. And what I'm doing is

43
00:02:32,483 --> 00:02:35,333
I'm looking for a code signing cert. So the interesting thing

44
00:02:35,416 --> 00:02:37,466
is, when I'm in the certificate drive, I can do things like...

45
00:02:37,483 --> 00:02:40,466
well, I can do recurse on any drive of course, but I can say

46
00:02:40,483 --> 00:02:44,466
give me the code signing certs. Oh, how strange. Then what I'm

47
00:02:44,483 --> 00:02:47,466
going to do is I'm going to say OV or output

48
00:02:49,483 --> 00:02:50,466
variable A.

49
00:02:51,483 --> 00:02:53,466
So what that did is it got me...

50
00:02:54,266 --> 00:02:57,466
did a recursive search, found me my code signing certs, and I

51
00:02:57,483 --> 00:03:00,466
now put them in dollar sign A. And now what I'm going to say

52
00:03:00,483 --> 00:03:03,466
is dollar sign cert equals dollar sign A to zero. So now I've

53
00:03:03,483 --> 00:03:07,466
got a particular code signing cert. Okay. So now let's see.

54
00:03:07,483 --> 00:03:09,466
Let me get my execution policy.

55
00:03:10,316 --> 00:03:14,466
Get execution policy. And you see it's RemoteSigned. Here I'm

56
00:03:14,483 --> 00:03:15,466
going to change that to

57
00:03:18,483 --> 00:03:24,250
set execution policy equals AllSigned.

58
00:03:25,483 --> 00:03:30,466
Oops, sorry. What am I doing? Set execution AllSigned, yeah,

59
00:03:30,483 --> 00:03:35,466
do it now. So here I am, and I have this test script. Let me

60
00:03:35,483 --> 00:03:37,333
just edit that test script.

61
00:03:37,483 --> 00:03:42,283
Let me just get rid of this because I already signed it.

62
00:03:42,483 --> 00:03:43,466
That's not right. Oh, did

63
00:03:46,333 --> 00:03:47,283
you see that?

64
00:03:47,366 --> 00:03:55,316
Okay. So there's my test script. Right? And I go, and I run

65
00:03:55,400 --> 00:04:03,466
it, and it says, no, you can't do it because it's not digitally signed.

66
00:04:03,483 --> 00:04:05,466
>> Because you went to AllSigned, which means everything must

67
00:04:06,166 --> 00:04:06,466
be signed.

68
00:04:06,483 --> 00:04:07,466
>> Everything must be signed.

69
00:04:07,166 --> 00:04:09,466
>> We'll talk about RemoteSigned in a second, but everything must

70
00:04:09,233 --> 00:04:09,466
be signed.

71
00:04:09,483 --> 00:04:12,466
>> So now I say, well, I'd like to sign it because I trust it.

72
00:04:12,483 --> 00:04:16,466
First, don't sign stuff you haven't understood. Like sign it...

73
00:04:17,483 --> 00:04:20,466
remember I said earlier, like I take my badge out, I put it on

74
00:04:20,483 --> 00:04:23,466
the table, and I say, I guarantee this is going to work.

75
00:04:23,483 --> 00:04:26,466
When you digitally sign something, you're taking your badge out.

76
00:04:27,483 --> 00:04:29,466
You're putting it on the table and saying, anything wrong, take

77
00:04:29,483 --> 00:04:33,466
my badge. So be careful. So you probably want to take a look

78
00:04:33,183 --> 00:04:34,216
at the script you're going to sign.

79
00:04:34,300 --> 00:04:35,366
>> Probably, yeah.

80
00:04:35,450 --> 00:04:36,466
>> I took a look at that and said...

81
00:04:37,483 --> 00:04:38,183
>> That's a good script....

82
00:04:38,266 --> 00:04:44,366
>> I'm good with that. So you want to set the authentication code

83
00:04:44,450 --> 00:04:45,466
signature of...

84
00:04:46,483 --> 00:04:49,466
I give my cert. Dollar sign cert and

85
00:04:51,483 --> 00:04:53,216
the file path.

86
00:04:53,483 --> 00:04:55,466
Okay, now, notice...

87
00:04:56,483 --> 00:04:59,300
now when I do this... test PS1.

88
00:05:00,483 --> 00:05:02,450
Cap test.

89
00:05:03,183 --> 00:05:08,433
Look at that thing, look at that thing.

90
00:05:08,450 --> 00:05:08,466
>> Wow.

91
00:05:09,483 --> 00:05:10,466
>> So now...

92
00:05:10,483 --> 00:05:12,466
I mean, that is a big beast.

93
00:05:12,483 --> 00:05:15,466
>> So now if your script actually did something harmful, we know

94
00:05:15,483 --> 00:05:18,466
who you are, and we can hunt you down.

95
00:05:18,166 --> 00:05:20,466
>> Yes, except it's a self-signing script, so fine.

96
00:05:20,483 --> 00:05:21,166
>> Yeah.

97
00:05:21,250 --> 00:05:24,466
>> But yes, we can. So here's the deal. Dot slash test.

98
00:05:24,233 --> 00:05:25,466
Watch what happens.

99
00:05:26,166 --> 00:05:29,466
Just because it's signed doesn't mean I'll run it. So it will

100
00:05:29,483 --> 00:05:33,316
say, hey, do you want to run this thing? And you can say, hey,

101
00:05:33,483 --> 00:05:38,166
never run it. Don't run it. Run it once. I'm going to say run

102
00:05:38,450 --> 00:05:38,466
it once.

103
00:05:40,400 --> 00:05:40,466
>> Awesome.

104
00:05:40,483 --> 00:05:42,466
>> Now, if I said always run it, it would have been taken that

105
00:05:42,483 --> 00:05:46,266
certificate and said, I always trust stuff from this guy.

106
00:05:46,350 --> 00:05:47,166
>> From this certificate.

107
00:05:47,483 --> 00:05:50,466
>> And then you can run it. Here, you want to see something crazy?

108
00:05:50,483 --> 00:05:51,466
>> Yeah, yeah, yeah.

109
00:05:51,483 --> 00:05:54,466
>> I told you, we pay attention to this security stuff, right?

110
00:05:54,483 --> 00:05:59,466
I told you that. So now imagine... imagine I go and I say...

111
00:06:01,483 --> 00:06:06,466
okay. So we say now just because it's sign, I can run it always.

112
00:06:06,483 --> 00:06:11,366
I can say set execution policy, and

113
00:06:13,333 --> 00:06:18,466
I'll say RemoteSigned. So fine.

114
00:06:18,483 --> 00:06:24,300
Now, now I can go and run this thing, and it just runs.

115
00:06:24,383 --> 00:06:24,466
>> It just runs.

116
00:06:25,333 --> 00:06:27,466
>> Now, watch this. Again, what did I say?

117
00:06:28,316 --> 00:06:30,316
When I get a script from the internet, you don't want to just

118
00:06:30,400 --> 00:06:34,466
run it. You want to examine it. So imagine I do this thing, and

119
00:06:34,483 --> 00:06:38,216
I say, hey, let me look at this thing. And I see that, and I

120
00:06:38,300 --> 00:06:41,383
say, hey, you know what, that's safe. I'm just going to run it.

121
00:06:41,466 --> 00:06:43,266
Take a look. Does that look safe?

122
00:06:43,350 --> 00:06:46,200
>> It's got a signature. And the code book's safe.

123
00:06:46,483 --> 00:06:49,0
>> But wait, what if I do this?

124
00:06:56,483 --> 00:07:00,200
>> Oh, that's not safe. That's not safe now.

125
00:07:00,283 --> 00:07:01,333
>> Now let's save that.

126
00:07:01,483 --> 00:07:02,416
>> That's kind of mean.

127
00:07:02,483 --> 00:07:07,466
>> So let's make sure we do this. So now, again, you come here,

128
00:07:07,483 --> 00:07:08,466
and you have this script...

129
00:07:09,400 --> 00:07:12,200
>> Yeah, that's mean, man.

130
00:07:12,283 --> 00:07:13,466
>> Hey you evaluated it.

131
00:07:13,483 --> 00:07:15,466
>> Yeah, I'm evaluating it, and it looks good at the top.

132
00:07:15,483 --> 00:07:19,383
>> Right. But what if down here, or somewhere in there, is there.

133
00:07:19,466 --> 00:07:20,333
>> Somebody, yeah.

134
00:07:21,450 --> 00:07:21,466
>> Let's run it.

135
00:07:23,483 --> 00:07:24,466
What do you think? Should I run it?

136
00:07:24,483 --> 00:07:27,466
>> Yeah, let's... no, no, because you're going to run it, it's

137
00:07:27,483 --> 00:07:28,350
going to restart your computer.

138
00:07:28,433 --> 00:07:31,466
>> I checked it out. I read it. It looked fine. Look, look.

139
00:07:31,483 --> 00:07:35,466
>> You're right. It looks fine. Okay, run it. It looks great.

140
00:07:35,483 --> 00:07:39,433
What could possibly go wrong? Nobody would have stuck anything in...

141
00:07:41,483 --> 00:07:43,166
>> So check this out.

142
00:07:43,250 --> 00:07:43,466
>> Oh, look.

143
00:07:43,483 --> 00:07:47,0
>> Executable code found in the signature block.

144
00:07:48,433 --> 00:07:52,466
So we're aware of this threat. We're aware that people, how they're

145
00:07:52,483 --> 00:07:54,466
going to evaluate things, they're going to look at things, and

146
00:07:54,483 --> 00:07:56,466
they're going to see the signature block, and they're just going

147
00:07:56,483 --> 00:08:00,466
to say, yeah, yeah, yeah, yeah, yeah. So we look for people

148
00:08:00,483 --> 00:08:04,466
sneaking in bad code, and so we protect you from that and say,

149
00:08:04,233 --> 00:08:07,333
no, we're not running that crap. We even tell you where it is,

150
00:08:07,483 --> 00:08:08,400
line 93.

151
00:08:09,233 --> 00:08:13,466
>> Oh, I just got saved from this horrible thing. That's totally awesome.

152
00:08:13,483 --> 00:08:15,466
>> Secure, secure, secure.

153
00:08:15,483 --> 00:08:18,466
>> So here's the deal. AllSigned versus RemoteSigned.

154
00:08:18,483 --> 00:08:22,466
AllSigned means every script that you download and that you create

155
00:08:22,483 --> 00:08:25,466
locally needs to be signed. And just to let you know... and I'm

156
00:08:25,483 --> 00:08:29,400
going to type this on my screen... there is a help file about_signing

157
00:08:29,483 --> 00:08:33,466
that will basically take you through everything Jeffrey just

158
00:08:33,483 --> 00:08:34,466
did to sign a script.

159
00:08:35,483 --> 00:08:39,466
But let's talk about something for a second. RemoteSigned.

160
00:08:39,483 --> 00:08:42,283
A lot of you now, it's going to be easier for you to start off

161
00:08:42,366 --> 00:08:45,350
with RemoteSigned. Here's what this means. Anything you download,

162
00:08:45,433 --> 00:08:48,466
like from the internet, needs to be signed. Do you guys know

163
00:08:48,483 --> 00:08:52,466
that we know what you download from the internet?

164
00:08:52,483 --> 00:08:53,466
[Laughter]

165
00:08:53,483 --> 00:09:02,466
I'm just saying. A bunch of guys just went, oh, I've got to delete this.

166
00:09:02,483 --> 00:09:04,466
I can't remember what was put in... Mark of the Web was put

167
00:09:05,166 --> 00:09:09,466
in so that things got tagged if they got downloaded from the internet.

168
00:09:09,483 --> 00:09:12,450
This is to protect you. This is a feature. And they tagged it

169
00:09:12,483 --> 00:09:16,466
so it overwrote root kits. Well, PowerShell knows this, and PowerShell

170
00:09:16,483 --> 00:09:20,183
knows, if you download it from the internet, if you're set to

171
00:09:20,266 --> 00:09:23,466
RemoteSigned, there needs to be a signature on there. But if

172
00:09:23,483 --> 00:09:27,466
you make the script locally, there doesn't have to be a signature

173
00:09:27,483 --> 00:09:30,466
on it. So a lot of folks will set their policy... and this is

174
00:09:31,483 --> 00:09:34,466
okay to start with... to RemoteSigned just because it's easier

175
00:09:34,483 --> 00:09:36,466
to get started with,

176
00:09:37,466 --> 00:09:41,0
which that's fine, but as soon as you possibly can, you really

177
00:09:41,483 --> 00:09:44,166
want to go to AllSigned because I want you to think about this.

178
00:09:44,483 --> 00:09:46,466
At some point, you're going to want to have this execution policy

179
00:09:46,483 --> 00:09:49,466
where you can run scripts in other places.

180
00:09:49,483 --> 00:09:53,466
And it would be nice to be able to control this through scripts

181
00:09:53,483 --> 00:09:57,266
have to be signed. Imagine what your users might do if they figure

182
00:09:57,350 --> 00:10:00,466
out how to turn on scripting policy. They might want to download

183
00:10:00,483 --> 00:10:01,466
a script.

184
00:10:01,483 --> 00:10:05,466
If you set this through a group policy, then you're going to

185
00:10:06,166 --> 00:10:09,166
be able to help control what could be some possible issues of

186
00:10:09,250 --> 00:10:13,466
users trying to do weird things. So this is actually important.

187
00:10:13,483 --> 00:10:15,466
RemoteSigned is good to start with. AllSigned is really the

188
00:10:15,483 --> 00:10:19,466
best to get to. Watch what happens now. And you've seen it with Jeffrey.

189
00:10:19,483 --> 00:10:23,466
Now that I have an execution policy that works, I can try to

190
00:10:23,483 --> 00:10:26,466
run my script, and I forgot what my script was.

191
00:10:26,483 --> 00:10:33,466
Iloveyou.ps1, and lo and behold, there it goes. So script execution

192
00:10:33,483 --> 00:10:35,466
policy, need to turn it on.

193
00:10:35,483 --> 00:10:37,433
>> Yeah, can I tell you about the latest version?

194
00:10:37,450 --> 00:10:37,466
>> Oh, oh, oh.

195
00:10:37,483 --> 00:10:39,466
>> Latest version of Windows.

196
00:10:39,483 --> 00:10:40,466
>> Top secret, top secret.

197
00:10:40,483 --> 00:10:44,0
>> Top secret. We're disclosing. I'm going to bring you into the

198
00:10:44,483 --> 00:10:45,466
circle of trust.

199
00:10:45,483 --> 00:10:47,166
>> The circle of trust, I like that.

200
00:10:47,250 --> 00:10:50,466
>> So the next version of Windows Server. Let's say Windows Server

201
00:10:50,483 --> 00:10:55,466
2012 R2, we changed the default execution policy to be RemoteSigned

202
00:10:55,483 --> 00:10:56,466
by default.

203
00:10:56,483 --> 00:10:59,466
>> Which is awesome because that way you don't have to run around

204
00:10:59,483 --> 00:11:02,416
to your servers or issue out a group policy to get this because

205
00:11:02,483 --> 00:11:06,466
you need your servers to have an execution policy. So when modules

206
00:11:06,483 --> 00:11:09,466
load and you want to load scripts from them and all that kind

207
00:11:09,483 --> 00:11:14,466
of stuff, it makes life a lot easier. So Server 2012 R2, right,

208
00:11:14,483 --> 00:11:17,466
is when it ships, will have the new policy, which is amazing

209
00:11:17,483 --> 00:11:18,466
to have that set.

210
00:11:18,483 --> 00:11:21,466
>> By the way, a number of people... I just want to clarify one thing.

211
00:11:21,483 --> 00:11:23,466
We're not going to get into the details of the security, but

212
00:11:23,483 --> 00:11:27,466
I want to just point out that even if you have like execution

213
00:11:27,483 --> 00:11:32,466
policy to be unrestricted or whatever, an interactive user...

214
00:11:32,483 --> 00:11:36,383
basically, an interactive user can do anything, and they can

215
00:11:36,466 --> 00:11:40,466
bypass that. Don't worry about that. That is not a security violation.

216
00:11:40,483 --> 00:11:44,233
That's not a hole. There's actually a long explanation for that.

217
00:11:44,316 --> 00:11:46,466
We won't get into it here because it's not that interesting,

218
00:11:46,483 --> 00:11:49,466
but just don't freak out. If somebody has access to a terminal,

219
00:11:49,483 --> 00:11:52,466
basically, here's the thought. If they have access to a terminal,

220
00:11:53,316 --> 00:11:57,466
they can create programs, compile those programs, and run it,

221
00:11:57,483 --> 00:12:01,466
which means they can do anything. So at this point, it's just

222
00:12:01,483 --> 00:12:02,166
not a security issue.

223
00:12:02,483 --> 00:12:05,466
>> Remember the old thing of physical access, right? Physical access.

224
00:12:05,483 --> 00:12:08,466
So, guys, we want to do a couple of things to set us up for some scripting.

225
00:12:08,483 --> 00:12:11,466
One of the things we're going to do here, we're going to start doing...

226
00:12:12,166 --> 00:12:13,466
first of all, variables.

227
00:12:14,483 --> 00:12:17,333
We've already been using them, believe it or not. I just want

228
00:12:17,483 --> 00:12:20,466
to show you... watch, I'm going to show you there's a whole bunch

229
00:12:20,233 --> 00:12:23,466
of Cmdlets. So I'm thinking to myself, how would I find if PowerShell

230
00:12:23,483 --> 00:12:28,466
had any Cmdlets to help me with variables? I can do this, variable,

231
00:12:28,483 --> 00:12:32,466
and, oh, looky, there's a whole bunch. Clear variable, get variable,

232
00:12:32,483 --> 00:12:36,333
new variable, remove variable... stop looking at the screen.

233
00:12:37,283 --> 00:12:39,466
We're not going to use any of them. We don't need to.

234
00:12:39,483 --> 00:12:42,333
PowerShell makes working with variables really easy. We don't

235
00:12:42,483 --> 00:12:44,466
necessarily need these Cmdlets. So let me show you how easy it

236
00:12:44,483 --> 00:12:50,466
is to make a variable. Watch. Variables have a dollar sign,

237
00:12:50,483 --> 00:12:53,466
and there's a lot of reasons for the use of this dollar sign.

238
00:12:53,483 --> 00:12:56,466
We're not going to get a chance to how the parsing engine reads

239
00:12:56,483 --> 00:12:59,466
all of this, but this is not the name or part of the name of

240
00:12:59,483 --> 00:13:02,466
the variable. It tells PowerShell, hey, something's about to

241
00:13:02,483 --> 00:13:07,450
happen, and if it's alpha numeric after it, myvar, this is going

242
00:13:07,483 --> 00:13:10,466
to be a variable. If you want to set this variable equal to something,

243
00:13:10,483 --> 00:13:13,466
equals hello.

244
00:13:14,483 --> 00:13:17,466
Thank you, thank you, no Cmdlets required. I just created a variable.

245
00:13:17,483 --> 00:13:20,466
Totally awesome. You want to see what's inside of a variable?

246
00:13:21,483 --> 00:13:26,183
Myvar. But variables are awesomely cool because variables don't

247
00:13:26,266 --> 00:13:29,466
just take text. They don't just take integers.

248
00:13:29,183 --> 00:13:37,466
Watch. Myvar equals get service bits.

249
00:13:38,483 --> 00:13:42,466
Guess what's in Myvar right now? Wait, let me show you.

250
00:13:42,483 --> 00:13:44,466
This is called Myvar.

251
00:13:45,483 --> 00:13:51,466
Wait, wait, wait, wait, watch it, watch it, watch it. Get member.

252
00:13:51,483 --> 00:13:56,466
Looky, look, look, look what's in Myvar. I've got a service

253
00:13:57,166 --> 00:14:00,316
controller object in there. It's not just text, guys. It's a

254
00:14:00,400 --> 00:14:02,466
service controller object. So I want you to notice something.

255
00:14:02,483 --> 00:14:06,466
We haven't talked much about running methods, but all these properties.

256
00:14:07,183 --> 00:14:10,0
There's a couple of methods here. There's a start and a stop method.

257
00:14:10,483 --> 00:14:15,466
Hmm, I have an idea. I wonder if I could use this dot notation

258
00:14:15,183 --> 00:14:18,466
that you started using, Myvar dot...

259
00:14:19,350 --> 00:14:22,283
oh, let me see, a property status. It's already running, and

260
00:14:22,366 --> 00:14:27,0
I wonder if I could get it to run a method like stop.

261
00:14:29,483 --> 00:14:30,466
>> Ooh.

262
00:14:30,483 --> 00:14:33,466
>> Now, I know you're all saying, well, prove it, prove it, prove it.

263
00:14:33,483 --> 00:14:36,466
All right, one little thing is I'm going to do Myvar status.

264
00:14:36,483 --> 00:14:40,316
And you're saying, no, it didn't work. Wait a second. If we

265
00:14:40,400 --> 00:14:44,466
refreshed everything that happened in Windows constantly, oh,

266
00:14:44,483 --> 00:14:48,466
my God. So there's a method to help us refresh this. So refresh,

267
00:14:50,483 --> 00:14:54,466
and now look at the status. Boom, totally awesome.

268
00:14:55,483 --> 00:14:58,466
Vars make your life much easier. And, of course, with scripting,

269
00:14:58,483 --> 00:15:02,466
vars become very important. Now, there's a lot to do with vars,

270
00:15:02,483 --> 00:15:06,466
and there's a lot of tips and tricks to working with vars.

271
00:15:06,483 --> 00:15:07,466
>> Can I just tell them one thing?

272
00:15:07,483 --> 00:15:08,466
>> Oh, absolutely.

273
00:15:09,483 --> 00:15:13,466
>> So stop. Here's the thing. I think it's because it's Jumpstart

274
00:15:13,483 --> 00:15:16,466
and it's a tutorial, like why do we have this dollar sign?

275
00:15:17,333 --> 00:15:21,466
I hate dollar sign, blah, blah, blah. Here's why. When we say

276
00:15:21,183 --> 00:15:21,466
dollar sign

277
00:15:23,483 --> 00:15:26,466
Myvar equals get service

278
00:15:28,283 --> 00:15:32,466
bits, okay, right in it just works, right? But what happens if

279
00:15:32,483 --> 00:15:36,466
I do this, right? Some people are like, I don't like dollar signs.

280
00:15:36,483 --> 00:15:38,466
Okay, fine. What happens?

281
00:15:39,483 --> 00:15:43,216
The answer is an error, but look at the error. The term Myvar

282
00:15:43,300 --> 00:15:48,466
is not recognized as the name of a Cmdlet. Okay, so when you

283
00:15:49,483 --> 00:15:53,466
start a command, when you start a line with a name, the question

284
00:15:53,483 --> 00:15:58,466
is, well, is it a variable, or is it a Cmdlet? And we have to know.

285
00:15:58,216 --> 00:16:01,166
So that's why we have dollar signs in front of our variables

286
00:16:01,250 --> 00:16:03,466
because you have to know. And this... remember I talked about

287
00:16:03,483 --> 00:16:07,466
the struggle between interactive programming and systems programming.

288
00:16:07,483 --> 00:16:13,466
This was the key thing. The interactive commands require a special syntax.

289
00:16:13,483 --> 00:16:16,466
In programs, you're not running things out of the file system.

290
00:16:16,483 --> 00:16:17,466
>> Right.

291
00:16:17,166 --> 00:16:20,466
>> Right? You're running APIs and such. In interactive shell,

292
00:16:20,483 --> 00:16:24,450
you run things out of the command. So when you type ping, you

293
00:16:24,483 --> 00:16:27,466
just want ping to work. You don't want to have to say, oh, I

294
00:16:27,483 --> 00:16:29,466
want to do something special for ping.

295
00:16:30,483 --> 00:16:32,466
So that's why you just type ping.

296
00:16:34,483 --> 00:16:40,466
But if you want dollar sign ping to be X, you type dollar sign ping.

297
00:16:40,483 --> 00:16:42,466
That's why we have the dollar sign. That's it.

298
00:16:42,483 --> 00:16:44,466
>> And that's actually very important. Everybody is always asking

299
00:16:44,483 --> 00:16:47,166
about the dollar sign. When you're working with vars, you've

300
00:16:47,250 --> 00:16:50,466
got to have the dollar sign. Now, a couple of little things,

301
00:16:50,483 --> 00:16:54,466
a little... oh, let's play with... since we're getting ready

302
00:16:54,483 --> 00:16:57,466
for scripting, we're going to take this concept of using a var

303
00:16:57,483 --> 00:16:58,466
and try something here.

304
00:16:59,483 --> 00:17:02,466
Let's see... there's a Cmdlet called read host.

305
00:17:03,483 --> 00:17:06,466
It will actually read things from the host.

306
00:17:07,483 --> 00:17:11,466
The host. So let me see. Dollar sign var equals read host.

307
00:17:11,483 --> 00:17:14,466
So whatever we read in is going to get stored in the variable,

308
00:17:14,483 --> 00:17:19,466
and I'm going to say enter a computer name. Guys, you can imagine

309
00:17:19,483 --> 00:17:21,466
this in a script already because watch what happens. I'm going

310
00:17:21,483 --> 00:17:23,466
to strike enter, and it comes up and says, enter a computer name.

311
00:17:23,483 --> 00:17:25,0
I'll enter one.

312
00:17:25,483 --> 00:17:27,466
Now, what's stored in var right now

313
00:17:29,283 --> 00:17:32,466
is that computer name. You can now use that variable, which is

314
00:17:32,483 --> 00:17:37,466
where we're going with all this, get service name bits-computer

315
00:17:37,483 --> 00:17:41,466
name dollar sign var. Guess where we're going to get that information

316
00:17:41,483 --> 00:17:47,366
from now? So we're going out to that... the DC in this case.

317
00:17:47,450 --> 00:17:49,466
So we're storing stuff in the vars and we're going to use those

318
00:17:50,483 --> 00:17:53,466
vars in our commands with our parameters as part of the arguments.

319
00:17:54,483 --> 00:17:57,466
This is going to start us making better scripts and being able

320
00:17:57,483 --> 00:18:00,466
to do automation a little bit better. But I want to show you

321
00:18:00,483 --> 00:18:03,466
just a couple of quick things because you're going to hear this

322
00:18:03,483 --> 00:18:05,466
and you're going to see this a lot, and I just have to throw

323
00:18:05,483 --> 00:18:10,466
it out because I'm kind of... I want to ask about it. So dollar

324
00:18:10,483 --> 00:18:13,466
sign var, if I do this, it just prints it to the screen, but

325
00:18:13,483 --> 00:18:17,416
we actually have a Cmdlet that is signed to print things to the

326
00:18:17,483 --> 00:18:21,466
screen for you. Let's do write host real quick. You're going

327
00:18:21,483 --> 00:18:24,466
to see this a lot. Write host, dollar sign var. Same result,

328
00:18:24,483 --> 00:18:29,166
except write host has things like foreground color red, background

329
00:18:29,250 --> 00:18:30,383
color green.

330
00:18:31,200 --> 00:18:33,466
Yea, you can play with the colors. Everybody just got really

331
00:18:33,483 --> 00:18:36,466
excited because they can play with the colors. Stop playing

332
00:18:36,483 --> 00:18:37,466
with colors.

333
00:18:38,483 --> 00:18:42,166
We have ways for you to play with colors. You've probably heard

334
00:18:42,483 --> 00:18:49,166
the phrase every time you use write host, God kills a puppy.

335
00:18:51,433 --> 00:18:54,466
Don't use write host. Now, I want to be straight with you.

336
00:18:54,200 --> 00:18:57,466
There are times to use write host, it's just I want you to see

337
00:18:57,483 --> 00:19:00,266
what you're doing, and when you start scripting, this really

338
00:19:00,350 --> 00:19:03,466
starts to matter. Dollar sign var. Watch what I'm going to do.

339
00:19:03,483 --> 00:19:05,466
Rhyme going to pipe this to get member.

340
00:19:06,483 --> 00:19:11,466
You would expect a result at this point. Look at what I'm getting.

341
00:19:11,483 --> 00:19:15,466
I get no object has been specified. In other words, nothing

342
00:19:15,166 --> 00:19:19,466
went across the pipeline. Write host just destroyed everything

343
00:19:19,483 --> 00:19:23,250
that I've been working so hard for with objects.

344
00:19:23,483 --> 00:19:25,466
Write host has annihilated it.

345
00:19:25,483 --> 00:19:28,466
>> By the way, notice it showed DC on the host.

346
00:19:28,483 --> 00:19:31,466
>> Yeah, because it actually wrote it out to the host.

347
00:19:31,483 --> 00:19:32,216
>> Yes.

348
00:19:32,300 --> 00:19:35,283
>> But there was nothing going down the pipeline. And the point

349
00:19:35,366 --> 00:19:36,466
is we want stuff going down the pipeline.

350
00:19:36,483 --> 00:19:41,350
So with write host, we have a Cmdlet that... watch this.

351
00:19:41,433 --> 00:19:47,466
Write output dollar sign var. And it does the exact same thing,

352
00:19:47,483 --> 00:19:51,283
but it's doing it through the pipeline. Look. Get member, looky

353
00:19:51,366 --> 00:19:51,466
what I got.

354
00:19:53,316 --> 00:19:55,466
I got a real object that's crossing across there now.

355
00:19:55,483 --> 00:19:56,466
>> Da-dah.

356
00:19:57,216 --> 00:20:01,466
>> So it matters. Everyone says, well, I lost the ability to make colors.

357
00:20:01,483 --> 00:20:03,183
Get over the color thing.

358
00:20:03,483 --> 00:20:07,383
Here's the deal. We have ways for you to make colors properly.

359
00:20:07,466 --> 00:20:10,466
You've noticed that PowerShell has a built-in color scheme that

360
00:20:10,483 --> 00:20:13,466
it uses, and as you start to script, this is going to become

361
00:20:13,200 --> 00:20:17,466
real paramount. As admins we get used to certain colors popping up.

362
00:20:17,483 --> 00:20:21,466
So in PowerShell, we've included Cmdlets to use the existing

363
00:20:21,483 --> 00:20:24,466
color scheme. If you just play along, it will all be good.

364
00:20:24,483 --> 00:20:28,333
Such as, I want to write a warning,

365
00:20:29,483 --> 00:20:32,466
please don't do that.

366
00:20:34,483 --> 00:20:37,466
Look, it comes up as a PowerShell warning, the yellow on black.

367
00:20:37,483 --> 00:20:41,0
So it makes sense to my brain because I've seen those warnings

368
00:20:41,483 --> 00:20:43,466
before or things that I need to care about. I didn't have to

369
00:20:43,483 --> 00:20:47,466
go through and use write host and come up with my own color scheme.

370
00:20:47,483 --> 00:20:50,466
Of course, we give you things like write error, and there's other

371
00:20:50,483 --> 00:20:54,466
stuff we have. But write error being one, stop touching me.

372
00:20:56,233 --> 00:21:00,200
Now it looks like a PowerShell error message, and I've generated

373
00:21:00,283 --> 00:21:02,466
the error, and it's in the same color scheme in the same format.

374
00:21:02,483 --> 00:21:06,466
So you don't need write host most of the time. If you want to

375
00:21:06,483 --> 00:21:08,466
put something on the screen in a different color, great.

376
00:21:08,483 --> 00:21:11,466
But try to stick with write output and the other write commands

377
00:21:11,483 --> 00:21:15,466
that we give you to write things out to the screen, especially

378
00:21:15,183 --> 00:21:18,466
when you're working with your vars because write host could and

379
00:21:18,483 --> 00:21:20,466
can be somewhat problematic.

380
00:21:20,483 --> 00:21:24,466
>> By the way, this is very analogous to what I mentioned about

381
00:21:24,483 --> 00:21:28,0
the console. Remember I said I'm trying to kill off the console

382
00:21:28,483 --> 00:21:31,183
because I'm trying to kill off console apps because apps that

383
00:21:31,266 --> 00:21:34,466
write directly to the console can't be automated. They are the

384
00:21:34,483 --> 00:21:38,466
enemy of automation. Write host is another flavor of a console app.

385
00:21:39,483 --> 00:21:40,466
>> Is another flavor of a console app.

386
00:21:40,483 --> 00:21:44,466
>> So don't do it. By the way, there are times we have a special

387
00:21:44,483 --> 00:21:48,466
like dispensation for people who are trying to do this.

388
00:21:48,483 --> 00:21:51,466
Here's the key thing. Say you wanted to write a script that was

389
00:21:51,483 --> 00:21:54,466
well-formatted and had colors and all that good stuff, that's fine.

390
00:21:54,483 --> 00:21:55,466
But use the word show.

391
00:21:57,483 --> 00:22:01,183
Whenever you see the word show, you should hear in your head,

392
00:22:01,266 --> 00:22:04,466
ah, I'm not going to be able to program or script the output

393
00:22:04,483 --> 00:22:07,466
of that. So that's perfectly fine, but just make sure you use

394
00:22:07,483 --> 00:22:09,466
the right term, show.

395
00:22:09,483 --> 00:22:14,466
>> And most of the time just don't use write host, just don't

396
00:22:14,483 --> 00:22:15,466
do it.

397
00:22:15,483 --> 00:22:16,466
>> It's because you like dogs.

398
00:22:17,483 --> 00:22:18,466
>> It's because I like dogs, and

399
00:22:20,483 --> 00:22:23,466
I have to give Don Jones credit for that phrase. He uses that

400
00:22:23,166 --> 00:22:27,250
all the time. So let's do something kind of fun and kind of exciting

401
00:22:27,333 --> 00:22:28,466
at this point. I think that this would be...

402
00:22:28,483 --> 00:22:30,466
>> You didn't show them the squiggle brackets.

403
00:22:31,450 --> 00:22:31,466
>> Huh?

404
00:22:31,483 --> 00:22:32,466
>> The squiggle brackets.

405
00:22:32,483 --> 00:22:34,466
>> You want to show them the variables with the squiggle brackets?

406
00:22:34,483 --> 00:22:35,400
>> Yeah.

407
00:22:35,450 --> 00:22:35,466
>> Really?

408
00:22:35,483 --> 00:22:36,466
>> That's awesome.

409
00:22:37,316 --> 00:22:37,466
Here, I'll do it.

410
00:22:37,483 --> 00:22:38,466
>> It scares me. Okay, you do it.

411
00:22:39,483 --> 00:22:42,433
>> So here's the thing. Hey, what can I do? Like, hey, is this

412
00:22:42,483 --> 00:22:45,466
an Anglo centric, English thing? And the answer is no, no, no,

413
00:22:45,483 --> 00:22:46,466
my friends.

414
00:22:47,483 --> 00:22:51,466
You can have variable of any sort of things, including spaces, right?

415
00:22:52,333 --> 00:22:59,466
So you can say, hey, this is a test equals 4. Right? And then

416
00:23:00,433 --> 00:23:04,466
this is a test. It's 4. Isn't that cool? Check this out.

417
00:23:04,183 --> 00:23:05,466
You can have anything you want in here.

418
00:23:06,483 --> 00:23:10,166
Oh, sorry, did the wrong thing. What the heck was that? Oh, that

419
00:23:10,450 --> 00:23:10,466
wasn't good.

420
00:23:11,483 --> 00:23:12,433
What did I do?

421
00:23:13,333 --> 00:23:16,466
Oh, good Lord, help, help, help. Help me, help me. I'm all confused.

422
00:23:16,483 --> 00:23:17,466
>> Wait a minute. What's...

423
00:23:17,483 --> 00:23:22,466
>> No, I just screwed up. Oh, there we go. There we go.

424
00:23:23,483 --> 00:23:24,366
There, that's what I meant to do.

425
00:23:24,483 --> 00:23:27,466
>> There you go. That's sufficiently weird.

426
00:23:28,483 --> 00:23:30,466
>> Equals wow.

427
00:23:31,483 --> 00:23:32,466
Okay, so now...

428
00:23:33,483 --> 00:23:36,166
look, that's the name of my variable. Did I screw that up?

429
00:23:36,250 --> 00:23:38,466
I did screw that up. Oh, no, I did equals.

430
00:23:39,483 --> 00:23:42,416
So that's the name of my variable. Is that crazy or what?

431
00:23:42,483 --> 00:23:43,466
>> That's crazy.

432
00:23:43,483 --> 00:23:46,466
>> But here it gets a little bit cooler because we draw this distinction

433
00:23:46,483 --> 00:23:49,466
between the syntax of a variable and the semantics of the variable.

434
00:23:49,483 --> 00:23:54,383
So here the syntax is just showing you it's a container.

435
00:23:54,466 --> 00:23:59,466
And I mentioned you can put any parameter you want. Sorry, any

436
00:24:00,483 --> 00:24:03,466
character you want. You can use unicode, et cetera. It's not

437
00:24:03,483 --> 00:24:08,466
entirely true. There's a special character, and that is the colon character.

438
00:24:08,483 --> 00:24:11,250
So let me make sure. Here's where I am. Imagine I do this.

439
00:24:11,333 --> 00:24:12,466
Imagine I do 1..5,

440
00:24:14,316 --> 00:24:16,466
and then I'm going to put that in a file, test.txt.

441
00:24:19,483 --> 00:24:27,466
Now watch this. C:Jumpstart text.txt.

442
00:24:29,483 --> 00:24:34,466
So check it out. I did dollar sign my parameters, and I gave

443
00:24:34,483 --> 00:24:35,433
a file path.

444
00:24:35,450 --> 00:24:35,466
>> Awesome.

445
00:24:35,483 --> 00:24:40,466
>> And I get the value of the file, right?

446
00:24:40,483 --> 00:24:43,466
>> So you're basically saying, do this.

447
00:24:44,483 --> 00:24:48,466
>> It is, hey, this dollar sign syntax basically says, where do

448
00:24:48,483 --> 00:24:51,466
I store my data? And in general, the way we think of variables

449
00:24:51,483 --> 00:24:54,316
is you store data in memory somewhere.

450
00:24:54,400 --> 00:24:54,466
>> Memory.

451
00:24:54,483 --> 00:24:58,183
>> And when the process goes away, well, that goes away.

452
00:24:58,266 --> 00:25:02,466
Well, look here. Here. Wait a second. So now, I get a second

453
00:25:02,483 --> 00:25:07,466
command, and I can say dollar sign C:Jumpstart/test.txt,

454
00:25:17,483 --> 00:25:18,466
squiggle brackets.

455
00:25:22,483 --> 00:25:23,466
Sorry, slash, slash,

456
00:25:25,333 --> 00:25:30,300
slash, and you get it there. No, wait. So equals.

457
00:25:35,483 --> 00:25:39,466
And go to this machine.

458
00:25:40,483 --> 00:25:41,466
>> And now...

459
00:25:41,483 --> 00:25:44,166
>> So now I've got variables that cross.

460
00:25:44,250 --> 00:25:45,466
>> That cross machines.

461
00:25:46,200 --> 00:25:46,466
>> Across machines.

462
00:25:46,483 --> 00:25:47,466
>> That's totally awesome.

463
00:25:47,483 --> 00:25:48,466
>> Fun, fun, fun.

