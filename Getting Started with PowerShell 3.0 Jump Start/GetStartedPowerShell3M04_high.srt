1
00:00:00,483 --> 00:00:07,466
[Music]

2
00:00:18,483 --> 00:00:20,466
>> Now's when the fun starts to begin.

3
00:00:21,0 --> 00:00:24,466
Before lunch I'm sorry to do this to you. I know, this is great.

4
00:00:25,483 --> 00:00:29,466
They can handle this. This is great. We're going to talk about objects.

5
00:00:29,483 --> 00:00:32,466
We're going to talk about objects and what objects are. And I'm

6
00:00:33,333 --> 00:00:35,466
going to let Jeffrey talk as much about objects as he wants to

7
00:00:35,483 --> 00:00:36,466
talk about.

8
00:00:36,483 --> 00:00:38,466
>> So let me just show you something here.

9
00:00:39,483 --> 00:00:43,466
So we've been lying to you. It's true.

10
00:00:44,450 --> 00:00:44,466
It's true.

11
00:00:45,483 --> 00:00:46,466
>> I'm leaving.

12
00:00:47,416 --> 00:00:52,416
>> So here we've been saying get service... service. This would

13
00:00:52,483 --> 00:00:53,466
be V star.

14
00:00:54,316 --> 00:00:59,466
And what do you see? And what you see is text. Okay. But that's

15
00:00:59,483 --> 00:01:02,466
not what's really going on. What's really going on is when I

16
00:01:02,483 --> 00:01:06,466
do get service, notice I didn't say get service text. I said

17
00:01:06,483 --> 00:01:12,416
get service. What I'm getting is service objects or service controller objects.

18
00:01:12,483 --> 00:01:14,466
And the point of that... now don't freak out when you hear the

19
00:01:14,483 --> 00:01:17,466
word "object". Some people hear the word "object" they're like

20
00:01:17,483 --> 00:01:22,466
oh my God, I'm not a developer. No, no, no my friends. No.

21
00:01:22,483 --> 00:01:27,466
Objects dramatically simplify your life. Okay. Now, what is

22
00:01:27,483 --> 00:01:30,466
an object? Okay. Let's just try and deal with that.

23
00:01:30,166 --> 00:01:34,466
>> Because I'm over here freaking out going no, no, no. But they're

24
00:01:34,200 --> 00:01:35,466
going to simplify my life. I'm good.

25
00:01:35,483 --> 00:01:40,466
>> So I think it was an MVP or TechEd did a great explanation

26
00:01:40,483 --> 00:01:46,350
of object. An object is just a thing. It's a noun that has properties

27
00:01:46,433 --> 00:01:50,466
and methods. So think about a bicycle, right? A bicycle is an object.

28
00:01:50,483 --> 00:01:56,316
And it has properties. It has handlebars. It has pedals.

29
00:01:56,400 --> 00:01:59,466
It has wheels. And then there are things you can do to it.

30
00:01:59,483 --> 00:02:02,466
So an object has things that it has.

31
00:02:03,483 --> 00:02:06,466
We call those properties. It has a handlebar, it has a wheel.

32
00:02:06,483 --> 00:02:11,466
It has a frame. And there are things that it can do. You can pedal.

33
00:02:12,0 --> 00:02:16,383
You can steer. And we call those things methods. So objects

34
00:02:16,466 --> 00:02:20,166
are merely things that have properties and things that you can

35
00:02:20,483 --> 00:02:21,166
do things to.

36
00:02:21,250 --> 00:02:23,466
>> I like that so far. I like that.

37
00:02:23,483 --> 00:02:27,466
>> So here we show this thing, and what actually happens is I

38
00:02:27,483 --> 00:02:31,416
got a set of objects. Now, the trick is, and here's the magic,

39
00:02:31,483 --> 00:02:36,216
is that we spew these objects out and we can then work on them.

40
00:02:36,300 --> 00:02:39,466
And when they finally get to the display, the display says, oh

41
00:02:39,483 --> 00:02:42,466
I've got an object, what the hell am I going to do with that?

42
00:02:42,483 --> 00:02:46,466
There's no way I'm going to burp out this binary stuff and people

43
00:02:46,483 --> 00:02:50,0
are going to figure it out. What the display does, it says now

44
00:02:50,483 --> 00:02:54,350
I'll convert it to an object or convert it to text.

45
00:02:54,483 --> 00:02:58,466
And the whole point about that is you want to delay the conversion

46
00:02:58,166 --> 00:03:01,466
of text as far as possible, as long as possible. Because once

47
00:03:01,483 --> 00:03:06,300
you have text, it's really hard to operate with. Now, you Unix

48
00:03:06,383 --> 00:03:08,466
guys, anybody with a Unix background, you know what I'm talking

49
00:03:08,483 --> 00:03:12,466
about, because imagine now let's go back to get process. I like

50
00:03:12,216 --> 00:03:14,466
get process. So get process.

51
00:03:14,483 --> 00:03:19,466
Star SS. Now, imagine you wanted to get all those things where

52
00:03:19,483 --> 00:03:24,400
the handles were greater than let's say 700. Let's do this.

53
00:03:24,483 --> 00:03:28,466
Get process. Okay. So you see there's a bunch of these things,

54
00:03:28,183 --> 00:03:30,466
and some of them are high. So let's say you wanted to get all

55
00:03:30,483 --> 00:03:33,266
those that were greater than a thousand. How would you do it.

56
00:03:33,350 --> 00:03:37,466
In Unix, if this is text, it gets text, how due do that?

57
00:03:37,483 --> 00:03:42,466
Let's see you've got to cut off, one, two, three lines and you

58
00:03:43,0 --> 00:03:45,466
go and say I'm going to cut off zero to... let's see, that's

59
00:03:45,483 --> 00:03:53,466
one, two, three, four, five, six, seven, seven... I've got to

60
00:03:53,483 --> 00:03:56,466
cut off these first seven characters and what do you get?

61
00:03:56,483 --> 00:04:00,466
And the answer is a string. So how do you do a string comparison

62
00:04:00,483 --> 00:04:03,466
that's greater than a thousand? Well, a thousand is actually easy.

63
00:04:03,483 --> 00:04:07,416
You could say if the string truncate all the spaces and then

64
00:04:07,483 --> 00:04:11,466
if the length is greater than three then it's greater than a thousand.

65
00:04:11,483 --> 00:04:14,466
But if you wanted to do it greater than 900, then you've got...

66
00:04:14,483 --> 00:04:19,250
so you get where I'm going. You Unix guys, hats off to you.

67
00:04:19,333 --> 00:04:21,466
I don't know how the heck you've been coping all these years.

68
00:04:22,483 --> 00:04:24,466
We call it prayer-based

69
00:04:25,483 --> 00:04:29,466
parsing, like please work. Exactly and oddly it's sort of worked

70
00:04:29,483 --> 00:04:33,200
fine but in our world you don't have to do that. In our world

71
00:04:33,283 --> 00:04:38,400
you have these objects. Now, the thing is, when I do get process,

72
00:04:38,483 --> 00:04:43,466
I'm displaying an object. Each row is the object itself.

73
00:04:43,483 --> 00:04:44,466
And each one of these

74
00:04:45,483 --> 00:04:50,466
displays here, each one of these columns reflects the properties.

75
00:04:51,300 --> 00:04:55,466
Okay. So what did I tell you? I told you we're trying to create

76
00:04:55,483 --> 00:04:59,466
a world where you think about what you want. You type it and

77
00:04:59,483 --> 00:05:03,466
you get it. And the way that works is because of objects.

78
00:05:03,483 --> 00:05:08,466
So what did I say? I said I wanted to get the processes.

79
00:05:09,483 --> 00:05:14,466
I wanted to get those where the handle count was greater than 900.

80
00:05:14,483 --> 00:05:18,466
Some number. You pick your favorite number. So when I say where

81
00:05:19,200 --> 00:05:21,466
the handles... remember, where did I get handles?

82
00:05:23,483 --> 00:05:26,466
Right there. Handles. So where handles

83
00:05:28,483 --> 00:05:33,466
are greater than or equal greater than 900.

84
00:05:36,333 --> 00:05:40,466
It worked. Why did it work? Because of objects. Objects are

85
00:05:40,216 --> 00:05:43,466
so cool. Now, wait. So this is still a little bit messy here,

86
00:05:43,483 --> 00:05:46,466
because these handles, I mean look at them. They're all kind

87
00:05:46,483 --> 00:05:50,233
of like all over the place. Right? So really what I want to do

88
00:05:50,316 --> 00:05:54,466
I want to sort them. Now, again you cut off three lines and you

89
00:05:54,483 --> 00:05:56,466
do this and again it's strings.

90
00:05:57,483 --> 00:06:02,0
But no, no, it's an object. So what you can do is again think

91
00:06:02,483 --> 00:06:05,466
about what you want. Type it and you get it. You say well I

92
00:06:05,483 --> 00:06:07,466
want to sort it by handles.

93
00:06:09,350 --> 00:06:12,466
Ta da. And then you get it.

94
00:06:13,466 --> 00:06:16,466
>> If you're starting to get the concept here, this is starting

95
00:06:16,483 --> 00:06:19,466
to become totally awesome. Look at the difference of working

96
00:06:19,483 --> 00:06:24,466
with objects. One thing that you can do to start off is to show

97
00:06:24,200 --> 00:06:27,466
that these are objects. I'm just going to grab a service real quick.

98
00:06:28,483 --> 00:06:32,466
And if you want to take a look at what properties... notice when

99
00:06:32,483 --> 00:06:37,233
I run just get service name bits, notice that there are three

100
00:06:37,483 --> 00:06:41,466
what appear to be properties displayed about this... you know

101
00:06:41,216 --> 00:06:45,283
what, I'm pretty sure there's more properties than just these

102
00:06:45,366 --> 00:06:48,466
three on a service. And I'm not seeing any methods here.

103
00:06:49,483 --> 00:06:53,466
But Jeffrey just said that objects have properties and they have methods.

104
00:06:53,483 --> 00:06:58,466
Well, there's a way to show you everything that an object has.

105
00:06:58,483 --> 00:07:02,466
And it's going to become a crucial part to working with PowerShell.

106
00:07:02,483 --> 00:07:06,466
So how do you find out what properties and methods an object

107
00:07:06,483 --> 00:07:12,466
has, you pipe it to a very special command and I'm going to get member.

108
00:07:12,483 --> 00:07:15,466
Now, I gotta be honest with you. Get member, we usually use

109
00:07:15,483 --> 00:07:19,466
the alias for this. So I'm just going to use the alias. Pipe GM.

110
00:07:19,483 --> 00:07:23,333
And you'll just hear me say pipe GM. When you pipe something

111
00:07:23,483 --> 00:07:27,216
and get member it takes the object and it shows you all the methods.

112
00:07:27,300 --> 00:07:30,466
So think of it this way. It's like if I were to walk in front

113
00:07:30,483 --> 00:07:33,466
of a mirror, the mirror shows me things like well you're 6'2".

114
00:07:34,483 --> 00:07:38,250
You're blond, blue eyes and you're built really well and you

115
00:07:38,333 --> 00:07:41,466
have methods, you have methods like you surf and you like karate.

116
00:07:41,483 --> 00:07:43,383
What do you like of my mirror.

117
00:07:43,466 --> 00:07:45,466
>> That's awesome I need one of those.

118
00:07:45,483 --> 00:07:49,466
>> Obviously my mirror doesn't work real well but the PowerShell

119
00:07:49,483 --> 00:07:54,466
mirror being get member works very well. If you take a look

120
00:07:54,483 --> 00:07:57,466
here, there's a couple of pieces of information you want to pull

121
00:07:57,483 --> 00:08:00,466
out from get member. First of all, what kind of object it is.

122
00:08:00,483 --> 00:08:03,466
This is going to become very important to us after lunch.

123
00:08:03,483 --> 00:08:05,466
What kind of object is this.

124
00:08:05,483 --> 00:08:07,466
>> Move your screen over a little bit. It's getting truncated

125
00:08:07,483 --> 00:08:09,366
a little bit. Let me get this.

126
00:08:10,250 --> 00:08:15,466
Does that work better? There we go. So system dot service process,

127
00:08:15,483 --> 00:08:18,333
what you really are interested in right now is this period and

128
00:08:18,483 --> 00:08:21,283
what comes after it service controller that's what kind of object

129
00:08:21,366 --> 00:08:24,466
is being sent across that pipeline and then look at this list.

130
00:08:24,483 --> 00:08:27,466
Anything with the word property in it, I don't care if it has

131
00:08:27,483 --> 00:08:31,183
some other word in front of it, anything with a property is a

132
00:08:31,266 --> 00:08:34,466
property that you can use and look at specifically.

133
00:08:35,250 --> 00:08:39,316
Like Jeffrey was doing handles on get process. Look at all these

134
00:08:39,400 --> 00:08:41,466
properties down through here. We're going to start off working

135
00:08:41,483 --> 00:08:44,466
quite a bit with properties but you also have methods.

136
00:08:44,483 --> 00:08:48,466
Methods like, oh, look, start and stop.

137
00:08:48,483 --> 00:08:52,466
Get service has a method to start and stop a service. We don't

138
00:08:52,483 --> 00:08:56,400
need a commandlet necessarily because we have a method that we

139
00:08:56,483 --> 00:08:59,333
could use. We'll show you how to do that too. So get member

140
00:08:59,416 --> 00:09:02,466
is your friend to show you the truth or what an object actually

141
00:09:02,483 --> 00:09:06,333
contains for its properties and its methods. Let me give you

142
00:09:06,416 --> 00:09:09,466
an example. Using kind of off of Jeffrey's example, I'm going

143
00:09:09,483 --> 00:09:12,466
to do get service, and here's what I want to do.

144
00:09:13,483 --> 00:09:18,466
I want to just select a couple of properties. The properties

145
00:09:18,483 --> 00:09:21,466
that I want to see right now are name and status.

146
00:09:22,483 --> 00:09:26,466
We have a commandlet called select object. Now, usually you

147
00:09:26,216 --> 00:09:31,350
see this as its alias of select. Let me just show you it has

148
00:09:31,433 --> 00:09:35,366
a parameter called property and you can tell me what properties

149
00:09:35,483 --> 00:09:38,466
you now want to see. Well, if I've gone to get member and I've

150
00:09:38,483 --> 00:09:40,466
looked at the list of properties and I've chosen the ones that

151
00:09:40,483 --> 00:09:45,416
I wanted, I just type them in. I just want name, status. So I've

152
00:09:45,483 --> 00:09:49,466
selected those particular properties. Now, I also want you to

153
00:09:49,483 --> 00:09:53,233
notice and Jeffrey just did an example of this. I'm going to

154
00:09:53,316 --> 00:09:56,466
do get child item or the alias DER is a great example.

155
00:09:56,483 --> 00:10:01,466
Here's a list of files out of my C drive. Files and folders.

156
00:10:01,483 --> 00:10:05,466
Right now look at how it's sorting them. Sorting them by name

157
00:10:05,216 --> 00:10:08,466
and it's sorting them looks to be alphabetically to me.

158
00:10:08,483 --> 00:10:11,466
Well, I want to change the sort. I'd like to sort them by length,

159
00:10:11,483 --> 00:10:15,466
and the only thing I want displayed is name and length. So here's

160
00:10:15,483 --> 00:10:16,466
what I'm going to do.

161
00:10:17,483 --> 00:10:19,216
I'm going to do get child item.

162
00:10:21,483 --> 00:10:27,466
I'm going to select that the properties I want to see are name

163
00:10:27,483 --> 00:10:31,466
and length, and this is right off the example that Jeffrey was

164
00:10:31,200 --> 00:10:32,466
doing, I want to sort that

165
00:10:34,483 --> 00:10:36,0
by the property length.

166
00:10:38,483 --> 00:10:41,466
This pipeline and the fact that objects are crossing the pipeline

167
00:10:41,483 --> 00:10:45,400
and I can work with these properties and methods are making my

168
00:10:45,483 --> 00:10:47,466
life a lot easier. Look at that. It's folders first then it's

169
00:10:47,483 --> 00:10:52,466
the files. You know what notice on my files it's small Zs to

170
00:10:52,483 --> 00:10:56,466
big Zs I want big Zs to small Zs, I want it descending.

171
00:10:57,483 --> 00:11:02,466
Let me hit my up arrow key and the sort object has a descending.

172
00:11:02,483 --> 00:11:05,466
Now I can change the sort order and make it descending. Is that

173
00:11:05,483 --> 00:11:08,466
kind of cool? That's kind of cool. That's kind of cool.

174
00:11:08,483 --> 00:11:13,466
That's kind of cool. Working with the objects. So working with

175
00:11:13,483 --> 00:11:18,466
objects is all about using get member. And we've shown you that

176
00:11:18,233 --> 00:11:22,0
you can do sort and you can do a select, and we're going to do

177
00:11:22,483 --> 00:11:25,266
these quite a bit of selecting and sorting. But there's some

178
00:11:25,350 --> 00:11:27,433
other examples. Let's see here.

179
00:11:28,483 --> 00:11:33,166
Keep in mind get process. When you need to know more about an

180
00:11:33,483 --> 00:11:35,400
object, this is very important, when you need to know more about

181
00:11:35,483 --> 00:11:37,466
an object, because this afternoon we're going to need to know

182
00:11:37,166 --> 00:11:41,466
more about an object, you pipe to GM which is get member.

183
00:11:41,483 --> 00:11:42,466
GM. You'll get

184
00:11:44,483 --> 00:11:47,466
the type of object it is, which we're going to need this later,

185
00:11:47,483 --> 00:11:51,400
and you get all of its properties and its methods. And if it

186
00:11:51,483 --> 00:11:55,466
has the word property in it, you can use it with sort and select

187
00:11:55,483 --> 00:11:58,466
like we just showed you that you could use it with. In fact,

188
00:11:58,483 --> 00:12:01,466
it's kind of interesting. There's all kinds of stuff you can do.

189
00:12:01,483 --> 00:12:04,466
So back to an earlier example. Get event log.

190
00:12:06,283 --> 00:12:09,466
Ooh, log name system. And we're going to do newest.

191
00:12:10,483 --> 00:12:12,466
Let's just do newest 5.

192
00:12:13,166 --> 00:12:16,466
And I want to, if I just run this you can see I'm getting all

193
00:12:16,483 --> 00:12:19,466
this information across here. I'd like to take a look at the

194
00:12:19,483 --> 00:12:22,466
object itself. So what I'm going to do is, because I want to

195
00:12:22,483 --> 00:12:26,466
see what all the properties are. I'm going to pipe it to GM.

196
00:12:26,483 --> 00:12:30,183
Wow, there's a lot more properties out here than I was seeing

197
00:12:30,266 --> 00:12:33,466
in the original display. Time generated, time written. So you

198
00:12:33,483 --> 00:12:38,466
know what I think I'd like, I think I'd like event ID and time

199
00:12:38,483 --> 00:12:43,466
generated and I think I would like, oh, what else would be a

200
00:12:43,483 --> 00:12:45,466
good property? Maybe.

201
00:12:46,450 --> 00:12:46,466
>> Message.

202
00:12:47,483 --> 00:12:49,466
>> Oh, message that would be perfect. That would be perfect.

203
00:12:49,483 --> 00:12:51,466
So I'm going to up arrow.

204
00:12:54,333 --> 00:12:56,466
Select. The property.

205
00:12:57,416 --> 00:12:58,466
Event ID.

206
00:12:59,483 --> 00:13:03,400
Yep. And if you take a look at the help file you'll see that

207
00:13:03,483 --> 00:13:07,466
dash property takes multiple values. So I can do time generated

208
00:13:07,483 --> 00:13:10,350
or time written. Let's do time written. I think I can type that one.

209
00:13:10,483 --> 00:13:11,466
>> You can hit tab.

210
00:13:12,450 --> 00:13:13,466
>> I can hit...

211
00:13:13,483 --> 00:13:14,466
>> Version 3.

212
00:13:14,166 --> 00:13:16,466
>> Version 3. Go to version 3 because you can hit tab.

213
00:13:17,0 --> 00:13:20,466
>> I hit tab it made my life much easier than typing. Now I've

214
00:13:20,483 --> 00:13:21,466
selected those.

215
00:13:22,483 --> 00:13:26,466
There we go and now I'd actually like to sort them on the time written.

216
00:13:27,316 --> 00:13:31,0
Now, guys, this is a VM. So there's not a whole lot of stuff

217
00:13:31,483 --> 00:13:34,466
out here, but you get the idea. I'm going to sort on the property of...

218
00:13:36,483 --> 00:13:38,466
okay I'm not getting my tab. Time written.

219
00:13:39,483 --> 00:13:43,466
And voila. If I want to sort it descending I can sort it descending.

220
00:13:44,483 --> 00:13:47,466
But now that I'm understanding the pipeline, I know how to find

221
00:13:47,483 --> 00:13:51,466
the properties that I want. Not just the ones that I saw in the

222
00:13:51,216 --> 00:13:55,466
display, but I can find all of the properties and then just select

223
00:13:55,483 --> 00:13:58,466
the ones I want and sort the ones I want. Now that I have what

224
00:13:59,166 --> 00:14:01,466
I want, well I don't want it on the screen.

225
00:14:02,483 --> 00:14:09,466
I want it converted to an HTML file, and I just love this.

226
00:14:11,250 --> 00:14:12,466
C colon error.htm.

227
00:14:13,483 --> 00:14:19,466
This will actually take a file UNC. Just throw it to a Web server.

228
00:14:20,483 --> 00:14:24,466
Did I mention I was a Web guy? So anyways here's the deal.

229
00:14:24,483 --> 00:14:30,466
I've got this great one-liner right now that's grabbing the errors.

230
00:14:30,233 --> 00:14:32,266
And right now it's from the local machine. But I can throw it

231
00:14:32,350 --> 00:14:35,283
dash computer get it from multiple machines. It's selecting

232
00:14:35,366 --> 00:14:37,466
out just the information I want. It's sorting it the way I want

233
00:14:37,483 --> 00:14:41,466
and stuffing it into a Web file. I can now tell the other admins

234
00:14:41,483 --> 00:14:45,300
when you get up in the morning, go check the Web page and if

235
00:14:45,383 --> 00:14:48,183
there's any errors in there, start trying to fix them.

236
00:14:48,266 --> 00:14:51,183
Because as you're going to see later, we're going to automate

237
00:14:51,266 --> 00:14:55,183
this and schedule this and make this go for us. So I don't have

238
00:14:55,266 --> 00:14:57,466
to type it again. So once I figured it out. But you can see

239
00:14:57,483 --> 00:15:01,450
it's like figuring out a puzzle. Just to show you it actually worked.

240
00:15:01,483 --> 00:15:04,366
What did I call it error htm.

241
00:15:05,483 --> 00:15:09,466
DA DA. There's a whoohoo even from the guys in the back.

242
00:15:09,483 --> 00:15:11,466
>> It's all good.

243
00:15:11,233 --> 00:15:13,466
>> You must be a little impressed with that. What else should

244
00:15:13,483 --> 00:15:15,466
we show them with objects right now?

245
00:15:15,483 --> 00:15:17,466
>> Here's the thing about objects. I mentioned to you that the

246
00:15:17,483 --> 00:15:21,466
objects dramatically simplify your life. It's true.

247
00:15:22,333 --> 00:15:25,383
Here's the thing what we've been showing you are .NET objects.

248
00:15:25,466 --> 00:15:29,466
Now these .NET objects are actually very well behaved objects.

249
00:15:29,483 --> 00:15:33,416
But you know the world is a messy place. And not everybody has

250
00:15:33,483 --> 00:15:36,466
your best interests in mind. And so in particular there's a lot

251
00:15:36,483 --> 00:15:40,466
of people who use .NET in a way that is good for them but not

252
00:15:40,483 --> 00:15:44,466
good for you. Okay. And in particular, what they do is they hide things.

253
00:15:44,483 --> 00:15:48,466
And this is ubiquitous. This happens in WMI. It happens in ABSI,

254
00:15:48,483 --> 00:15:53,466
Active Directory. Happens in XML, et cetera. Now PowerShell

255
00:15:53,483 --> 00:15:55,466
we have exactly one customer and that's you.

256
00:15:56,483 --> 00:15:59,466
I'm focused on making your life great.

257
00:15:59,483 --> 00:16:03,466
So what we do we go and we say these guys didn't help you, we'll

258
00:16:03,483 --> 00:16:07,466
help you. Right, we will take their stuff and we'll adapt it

259
00:16:07,483 --> 00:16:10,466
for your needs. Now, let me just give you an example of this.

260
00:16:10,483 --> 00:16:17,466
So here I have... I got this XML file. Okay. So r and d j.

261
00:16:17,483 --> 00:16:19,466
Let me see if I can bring that up.

262
00:16:21,483 --> 00:16:26,333
Can I do this? Open. Can I do an open? PowerShell.org.

263
00:16:26,416 --> 00:16:29,466
We'll talk about that. That's cool. Can I do an open?

264
00:16:29,483 --> 00:16:33,400
Yeah, I wanted to say C, Jumpstart/R.

265
00:16:38,300 --> 00:16:40,466
And here's my XML. And it is the

266
00:16:41,483 --> 00:16:43,466
tragedy of Romeo and Juliette.

267
00:16:44,483 --> 00:16:45,466
It's beautiful. Look here

268
00:16:47,483 --> 00:16:51,466
you've got personas. You've got acts. And in the acts you've

269
00:16:51,483 --> 00:16:52,466
got speeches.

270
00:16:53,483 --> 00:16:56,466
And you've got speakers and you've got lines.

271
00:16:57,483 --> 00:16:59,466
Now, by the way, this next thing that I'm going to show you I'm

272
00:16:59,483 --> 00:17:03,416
going to show you the way to do it in PowerShell version 3.

273
00:17:04,483 --> 00:17:07,466
In PowerShell version 2 you can do it but it's harder. And the

274
00:17:08,0 --> 00:17:11,466
stuff I'm going to show you requires version 3. So we have this thing.

275
00:17:11,483 --> 00:17:16,466
We'll call it dot assign X. And what we're going to do is we're

276
00:17:16,483 --> 00:17:21,466
going to cat that file. Cat is the same as get content.

277
00:17:21,483 --> 00:17:25,466
Remember I'm an old Linux guy Unix guy. I'm going to say cat

278
00:17:25,483 --> 00:17:34,466
r and d. And what I'll do is I'll cast it like XML. I'm going

279
00:17:34,166 --> 00:17:39,383
to copy this file and cast it as XML. Now I'll have an object

280
00:17:39,466 --> 00:17:47,466
I'll assign X which contains the XML. Now this is really dot XML.

281
00:17:47,483 --> 00:17:51,466
The way you can tell that you can type type and you can see it's

282
00:17:51,483 --> 00:17:57,466
an XML document. So this is XML. Now, have you ever worked with XML?

283
00:17:57,483 --> 00:17:58,466
>> Not in its raw form.

284
00:17:58,483 --> 00:18:03,466
>> It's hideous. It's hideous, like kicking a dead whale along

285
00:18:03,483 --> 00:18:08,466
the beach. All sorts of effort and seems like nothing ever ever

286
00:18:08,483 --> 00:18:12,466
happens just hideous. But not in PowerShell. So in PowerShell,

287
00:18:12,483 --> 00:18:15,466
again, I mapped this hideous world to your world. Remember, what

288
00:18:15,483 --> 00:18:20,466
does this thing look like? Like blah, blah, blah. Right?

289
00:18:20,483 --> 00:18:23,450
Here when I said I see dollar sign x.play.

290
00:18:26,483 --> 00:18:30,466
Oh, look at that. So then here are the acts.

291
00:18:32,333 --> 00:18:37,466
Oh, look at that. I could say well give me act 0 and give me

292
00:18:37,216 --> 00:18:43,200
the scene and here are all the scenes. And I can say, hey, scene

293
00:18:43,283 --> 00:18:45,466
0, give me the speech.

294
00:18:47,483 --> 00:18:52,466
And there are all the speeches. Look. Is that cool or what?

295
00:18:52,483 --> 00:18:56,466
It gets better. Here, if I get rid of this index. Remember, it

296
00:18:56,483 --> 00:19:01,466
gave me a set of things, and I selected the first one. So now

297
00:19:01,483 --> 00:19:04,466
what I'm going to do, because PowerShell version 3 I can go and

298
00:19:04,483 --> 00:19:08,466
say, hey, I want all the scenes and I want all the acts.

299
00:19:10,383 --> 00:19:11,466
And it gives them all.

300
00:19:11,483 --> 00:19:22,466
Now select, now what I can do I can say I'd like to group them

301
00:19:22,483 --> 00:19:26,466
by the speaker and I would like to sort them by count.

302
00:19:28,483 --> 00:19:31,350
And if you're going to... if you're in theater, you definitely

303
00:19:31,433 --> 00:19:35,466
want to be Romeo and not the third musician. Because the third

304
00:19:35,483 --> 00:19:41,466
musician has exactly one speech whereas Romeo has 163. Now, let's

305
00:19:41,483 --> 00:19:43,466
just think about this a second.

306
00:19:44,166 --> 00:19:47,466
Let's just think about this a second. So here I have this XML

307
00:19:47,483 --> 00:19:50,466
and the point is that there's a bunch of XML in the world like

308
00:19:50,483 --> 00:19:53,466
you didn't ask for it but somebody decided hey I'm going to give

309
00:19:53,483 --> 00:19:57,466
you some XML. Thank you. Thank you so much. But... so it's

310
00:19:57,483 --> 00:20:02,466
like, like what, what, what, this hideous horrible world.

311
00:20:02,483 --> 00:20:05,466
Again if you've ever dealt with XML you know exactly what I'm

312
00:20:05,483 --> 00:20:08,466
talking about. But what we do about is we're able to...

313
00:20:09,483 --> 00:20:13,466
by the way, if I wanted to get the history of things that I typed,

314
00:20:14,400 --> 00:20:17,466
you would type get history.

315
00:20:19,483 --> 00:20:24,183
So here are the things that I typed. So what I did was I...

316
00:20:26,483 --> 00:20:33,416
so first was I got the content of that file and I cast it to

317
00:20:33,483 --> 00:20:40,333
XML here. Somewhere. Somewhere. Here. Right. And then I showed

318
00:20:40,416 --> 00:20:42,466
you that it was an XML document here.

319
00:20:42,483 --> 00:20:45,466
And then you are able to ask for the play. We're able to see

320
00:20:45,483 --> 00:20:50,466
that it had an act. I drilled into act one. I saw that it had scenes.

321
00:20:50,483 --> 00:20:53,466
I drilled into scene one and saw that it had speeches and I got

322
00:20:53,483 --> 00:20:58,350
that speech. And then I removed all those, and I got all the speeches.

323
00:20:58,483 --> 00:21:03,166
And then I selected the first one to find out what the properties

324
00:21:03,250 --> 00:21:07,333
of that speech were. I saw that it had a speaker and so I grouped

325
00:21:07,483 --> 00:21:11,166
it by speaker and sorted it by count. And it's that simple.

326
00:21:11,483 --> 00:21:14,466
>> And what's really amazing about this is noticing we're utilizing

327
00:21:14,483 --> 00:21:18,466
the pipeline, and we're building these results as we move along.

328
00:21:18,483 --> 00:21:22,216
We're utilizing the objects because it's an object-based pipeline,

329
00:21:22,483 --> 00:21:23,466
and so even...

330
00:21:23,483 --> 00:21:25,466
>> Actually you know what he's right. If you're in version 2

331
00:21:25,483 --> 00:21:28,466
we didn't use the pipeline, but that's exactly the point.

332
00:21:28,483 --> 00:21:33,233
In version 2 you would have had to use the pipeline. Back when

333
00:21:33,316 --> 00:21:37,466
we did this to get everything, what you would have had to have

334
00:21:37,483 --> 00:21:40,466
done is something like... because we fixed it you would have

335
00:21:41,483 --> 00:21:44,466
done something like I think it was this, you would have to say

336
00:21:46,483 --> 00:21:53,0
through select minus expand, scene...

337
00:21:55,483 --> 00:22:01,466
I think I even got that wrong. Through select, minus expand, speech.

338
00:22:01,483 --> 00:22:05,466
And I did get this wrong. Anyway, so a bunch of pipelines, very,

339
00:22:05,183 --> 00:22:08,466
very powerful stuff. And in version three we simplified it with

340
00:22:08,483 --> 00:22:09,466
the dot syntax.

341
00:22:09,483 --> 00:22:12,350
>> The dot syntax you're going to see quite a bit today as we

342
00:22:12,433 --> 00:22:15,466
start utilizing it. But combining that along with the pipeline

343
00:22:15,483 --> 00:22:18,466
really makes it very powerful. Now, a couple of other things

344
00:22:18,483 --> 00:22:21,466
that Jeffrey was showing you that I want to highlight. And we're

345
00:22:21,483 --> 00:22:25,283
going to need this information for this afternoon. So along

346
00:22:25,366 --> 00:22:29,466
with working with objects, Jeffrey also showed you a filter.

347
00:22:29,483 --> 00:22:31,466
So let me give you an example. Get service.

348
00:22:32,483 --> 00:22:36,466
We have a commandlet called where object. Now where object is

349
00:22:36,483 --> 00:22:39,466
a way for you to filter out only the data that you want to see.

350
00:22:40,333 --> 00:22:43,466
Usually you'll see it abbreviated down to where. That's using

351
00:22:43,483 --> 00:22:49,466
the alias that way. Now, there is a parameter called filter script

352
00:22:50,483 --> 00:22:51,466
that has a couple of squigglies.

353
00:22:52,483 --> 00:22:57,466
Squigglies. Whatever happens in the squigglies is your filter.

354
00:22:57,483 --> 00:23:00,233
Now, I'm going to show you a couple of ways to write a filter,

355
00:23:00,316 --> 00:23:02,400
because this is what you're going to see on the Internet.

356
00:23:02,483 --> 00:23:06,466
First of all, almost nobody uses the parameter name filter script.

357
00:23:06,483 --> 00:23:10,416
So it's the squigglies. I want you to see something. This is

358
00:23:10,483 --> 00:23:12,466
special symbol. Now, we're going to talk about variables later.

359
00:23:13,333 --> 00:23:16,466
But the dollar sign is a special indicator for you. And in this

360
00:23:16,483 --> 00:23:19,416
case dollar sign underscore means

361
00:23:20,483 --> 00:23:24,466
the current object crossing the pipeline. Now, notice I've got

362
00:23:24,483 --> 00:23:27,466
get service. That's got a whole bunch of objects. We're going

363
00:23:27,483 --> 00:23:30,466
to send one at a time across the pipeline. I want to grab hold

364
00:23:30,483 --> 00:23:34,466
of that for a second because I want to do something to it.

365
00:23:34,200 --> 00:23:38,466
It's stored in dollar sign underscore. Now, in V3, there's another

366
00:23:39,483 --> 00:23:42,466
way we can show you to do this. But hang on a sec. Let me show you.

367
00:23:42,483 --> 00:23:46,466
I want to look at the property status.

368
00:23:48,483 --> 00:23:52,466
And if it's equal to running. As a filter, I want you to think

369
00:23:52,483 --> 00:23:56,466
about this. This is going to filter out only the things that

370
00:23:56,483 --> 00:23:59,466
equal to running. Now, I know you might be saying what the devil

371
00:23:59,483 --> 00:24:05,466
is this EQ over here. Why isn't it equals. Why isn't it equals?

372
00:24:05,483 --> 00:24:08,466
>> So here's the thing. Bruce Payette, superstar, rock star, wrote

373
00:24:08,483 --> 00:24:12,466
this book PowerShell in Action. He goes and describes all the

374
00:24:12,483 --> 00:24:15,466
reasons why we made the language choices. If you ever get to

375
00:24:16,333 --> 00:24:19,466
the point where you're asking deep questions like this, Bruce's

376
00:24:19,483 --> 00:24:22,283
Book, PowerShell in Action, is the book to answer it.

377
00:24:22,366 --> 00:24:25,466
Here's the thing we struggled with this one over and over again.

378
00:24:25,483 --> 00:24:29,333
Honestly. As we started and designed the language in the system,

379
00:24:29,416 --> 00:24:34,183
we struggled with saying, hey, we want to be interactive and programmatic.

380
00:24:34,266 --> 00:24:39,466
And in Linux, UNIX where we had come from, you have these big separations.

381
00:24:40,483 --> 00:24:43,466
You start off with one tool and then that tool fails you.

382
00:24:43,483 --> 00:24:46,466
So you've got to throw everything away and pick up another tool.

383
00:24:46,483 --> 00:24:49,466
You try and write it in the shell script it's not power enough.

384
00:24:49,483 --> 00:24:53,316
You throw it away write it in AUC and Grab and SED, and it's

385
00:24:53,400 --> 00:24:56,466
not powerful enough and you throw it away then use it in PERL,

386
00:24:56,483 --> 00:25:01,250
that's not powerful enough you throw it away pick it up and write

387
00:25:01,333 --> 00:25:01,466
it in C.

388
00:25:03,350 --> 00:25:07,0
That's my joke that Unix is a sequence of failed tools.

389
00:25:07,483 --> 00:25:10,466
What we wanted to do was to have one tool that would work whether

390
00:25:10,483 --> 00:25:14,300
you wanted to do it interactively or you wanted to do this rich

391
00:25:14,383 --> 00:25:17,466
systems programming level. And it turns out that's hard.

392
00:25:18,483 --> 00:25:21,466
Never been done before. Never been done before. And we did it.

393
00:25:21,483 --> 00:25:25,383
And honestly we just struggled with this. Hey, turns out there's

394
00:25:25,466 --> 00:25:29,466
a reason why interactive shells have a syntax the way they do.

395
00:25:29,483 --> 00:25:33,0
There's a reason why programming languages have the language

396
00:25:33,483 --> 00:25:37,466
syntax that they do. And so we struggled with this and so we're

397
00:25:37,483 --> 00:25:41,466
able to finally get this nice match between those two. And part

398
00:25:41,483 --> 00:25:44,466
of the ramification of that... one of the ramifications of that

399
00:25:44,483 --> 00:25:48,466
was we needed to use... by the way when we chose a programming

400
00:25:48,483 --> 00:25:51,166
language we chose the C style.

401
00:25:51,483 --> 00:25:56,466
So the C, C++, C#. So we chose that style of things that's why

402
00:25:56,483 --> 00:26:00,466
you have squiggle brackets versus beginning and end and do and

403
00:26:00,483 --> 00:26:02,466
done or do and OD.

404
00:26:02,483 --> 00:26:03,466
>> Which always confused me.

405
00:26:03,483 --> 00:26:05,466
>> I like the terse kind of language.

406
00:26:05,483 --> 00:26:06,466
>> Exactly.

407
00:26:07,483 --> 00:26:10,166
>> Programmers do too. By the way, who is going to write most

408
00:26:10,483 --> 00:26:12,466
of the commandlets the programmers you want a world that's friendly

409
00:26:12,483 --> 00:26:18,466
to them. That's what we did. Turned out from the grammar, from

410
00:26:18,216 --> 00:26:23,466
the parser, if you had equals there, it got ambiguous. And we

411
00:26:23,183 --> 00:26:26,416
tried and tried and you couldn't resolve that one thing.

412
00:26:26,483 --> 00:26:30,466
That's why we have dash EQ. And let me show you guys, so let

413
00:26:30,483 --> 00:26:34,466
me, I'll show this to you a couple of ways dash EQ means equals.

414
00:26:34,483 --> 00:26:38,466
So as you can see I'm getting the services that are I filtered

415
00:26:38,483 --> 00:26:41,466
out the ones that are stopped, just the ones that are equal.

416
00:26:41,483 --> 00:26:46,466
Here's the important thing. You know, these are redirect characters.

417
00:26:46,483 --> 00:26:50,466
Like file redirect in a shell in a console. You can't use them.

418
00:26:50,483 --> 00:26:54,466
So they created and you can find these by doing get help.

419
00:26:54,483 --> 00:26:57,466
They're comparison operators. You can either do it by looking

420
00:26:57,483 --> 00:27:00,466
for comparison. You'll find the help file for it which is about

421
00:27:01,166 --> 00:27:05,466
underscore comparison operators that lists all of these and you're

422
00:27:05,483 --> 00:27:09,466
going to see a lot of them in here. Or to see all the operators

423
00:27:09,483 --> 00:27:15,466
get help on operators, because you're going to see us use these.

424
00:27:15,483 --> 00:27:18,466
You've got arithmetic assignment, comparison operators. Let me

425
00:27:18,483 --> 00:27:21,0
show you a couple of quick examples with this.

426
00:27:22,483 --> 00:27:24,466
On this filter.

427
00:27:25,483 --> 00:27:29,466
So I've got status equals running. Let me show you the V3 way

428
00:27:29,483 --> 00:27:31,466
to write this. Now it's important that you get used to seeing

429
00:27:31,483 --> 00:27:34,466
it as dollar sign underscore because you can see it on the Internet

430
00:27:34,483 --> 00:27:37,466
this way. And guys like me still use it that way. But there's

431
00:27:37,483 --> 00:27:39,466
a new way to write this

432
00:27:40,483 --> 00:27:46,466
called PS item, which makes a little bit more sense to a lot

433
00:27:47,333 --> 00:27:50,466
of folks that this is current, holding the current item crossing

434
00:27:50,166 --> 00:27:53,466
that pipeline. So get used to seeing it. It works the same way

435
00:27:53,483 --> 00:27:56,466
as dollar sign underscore as you can see it will come across.

436
00:27:56,483 --> 00:27:59,466
You're going to notice that I'm probably going to use dollar

437
00:27:59,483 --> 00:28:02,466
sign underscore because it's just what I'm used to using but

438
00:28:02,483 --> 00:28:06,466
PS item works but we can extend this filter even further. I want

439
00:28:06,483 --> 00:28:12,466
it that it is equal to running and dollar sign underscore.

440
00:28:12,483 --> 00:28:19,466
Ooh and the name is like and when you use like, now you can use wildcard.

441
00:28:19,483 --> 00:28:21,466
So I want it like

442
00:28:23,483 --> 00:28:28,466
B star. And I think I have some services. Aah. So this filter

443
00:28:28,483 --> 00:28:32,466
now lets me filter down data. Now, I need you to think about something.

444
00:28:32,483 --> 00:28:34,466
I'm going to do some pseudo code. Somebody is going to yell

445
00:28:34,483 --> 00:28:38,466
at me when I do this. Pseudo code means it's not really doing anything.

446
00:28:38,483 --> 00:28:39,466
So get stuff,

447
00:28:42,483 --> 00:28:45,466
sort, then where

448
00:28:47,483 --> 00:28:48,466
I just want some stuff.

449
00:28:50,166 --> 00:28:54,466
And then out to a file. Now, let me write this another way.

450
00:28:55,483 --> 00:28:56,466
Get stuff.

451
00:28:57,483 --> 00:28:59,466
By the way, don't try that commandlet it doesn't work.

452
00:29:00,483 --> 00:29:06,466
Where, which I can't spell, some stuff, sort.

453
00:29:07,483 --> 00:29:08,466
And then out file.

454
00:29:09,266 --> 00:29:13,466
Which do you think is going to be the best performing way to

455
00:29:13,483 --> 00:29:14,466
write this?

456
00:29:15,483 --> 00:29:17,466
If you think about it, think about what's actually happening here.

457
00:29:17,233 --> 00:29:17,466
I'm getting stuff.

458
00:29:18,483 --> 00:29:22,216
And in the first one I am sorting it. I'm sorting all of it.

459
00:29:24,483 --> 00:29:26,466
It's all sorted and then I'm handing it to a filter that says

460
00:29:26,483 --> 00:29:27,466
but I just wanted this.

461
00:29:28,466 --> 00:29:30,466
Throw the rest of it away. Thanks for all of your hard work,

462
00:29:30,483 --> 00:29:31,466
have a nice day.

463
00:29:32,483 --> 00:29:35,466
As opposed to the second one which is get stuff, I just want this.

464
00:29:36,483 --> 00:29:37,466
And now sort it.

465
00:29:37,483 --> 00:29:42,466
Done. So it does matter where you filter and where you sort.

466
00:29:42,483 --> 00:29:48,466
Refer to this as you filter as far left as you possibly can.

467
00:29:48,483 --> 00:29:52,466
And you can see examples today where the where object may not

468
00:29:52,483 --> 00:29:55,466
be the filter that's furthest left. As a matter of fact you

469
00:29:55,483 --> 00:29:58,466
see some cool examples where you want to keep in mind filters

470
00:29:58,483 --> 00:30:01,466
far left and sometimes that's with the commandlet that's starting

471
00:30:01,483 --> 00:30:06,466
the process. So you know Jeffrey I think we're at about meal time.

472
00:30:06,483 --> 00:30:09,466
>> Yeah, you know so, by the way, this where command is something

473
00:30:09,483 --> 00:30:12,466
you're going to want to spend some time with. That's one of

474
00:30:12,483 --> 00:30:16,466
the most powerful things like on the face of the planet.

475
00:30:16,483 --> 00:30:19,466
>> You guys are going to have questions after this. Now, I'm

476
00:30:19,183 --> 00:30:21,466
going to give you some references to go to. As a matter of fact,

477
00:30:21,483 --> 00:30:24,466
Don's got a great book out there that you really are going to

478
00:30:24,483 --> 00:30:27,466
want to take a look at. I'll mention it a little bit later on.

479
00:30:27,483 --> 00:30:31,166
But when you have questions, when you have things that are burning

480
00:30:31,483 --> 00:30:34,466
desires for PowerShell, I have a place for you to go. And since

481
00:30:34,483 --> 00:30:36,466
Don is here, let me just show it to you, if I can figure out

482
00:30:36,483 --> 00:30:37,466
how to work

483
00:30:39,483 --> 00:30:40,466
Windows here. Here we go.

484
00:30:41,483 --> 00:30:44,466
I'm so used to the PowerShell stuff I forget... here's this

485
00:30:44,483 --> 00:30:50,466
place called PowerShell.org. .org. And look this is centralized

486
00:30:50,483 --> 00:30:53,350
place for you to find a ton of resources, but one of the most

487
00:30:53,433 --> 00:30:56,466
important things out there is when you go out here, you'll see

488
00:30:56,483 --> 00:30:59,466
the forums. You can go out there and you can ask questions and

489
00:30:59,483 --> 00:31:02,466
get answers and a lot of MVPs and a lot of super gurus are out

490
00:31:03,166 --> 00:31:06,466
there and it would be even great if some day you decide to help

491
00:31:06,483 --> 00:31:09,466
answer some questions. But we've got forums. We've got free

492
00:31:09,483 --> 00:31:12,466
e-books out there to help you with some of the specialized topics

493
00:31:12,483 --> 00:31:14,466
we'll be getting into today.

494
00:31:14,483 --> 00:31:18,466
>> Free. PowerShell. People's favorite word free.

495
00:31:20,483 --> 00:31:23,466
>> I want to point out we've got articles.

496
00:31:23,483 --> 00:31:25,466
There's a PowerShell summit.

497
00:31:25,483 --> 00:31:30,466
Information coming up, tickets are going to go on sale. Not trying

498
00:31:30,483 --> 00:31:35,466
to be a sales guy. Just letting you know. The podcast. The power

499
00:31:35,483 --> 00:31:39,466
scripting podcast has a ton of information especially over the

500
00:31:39,483 --> 00:31:43,466
last five years of PowerShell and power scripting podcasts out there.

501
00:31:43,483 --> 00:31:48,466
And entire script repository. Go to PowerShell.org and ask questions

502
00:31:48,483 --> 00:31:51,466
after this event. We'll be happy to help you out. And Don's

503
00:31:51,483 --> 00:31:55,466
the guy in charge of this, and one of the people responsible

504
00:31:55,483 --> 00:31:58,466
for this. So thanks Don. Glad you're helping us out today.

505
00:31:58,483 --> 00:32:02,466
Before we get started into chapter 6, there were some things

506
00:32:02,483 --> 00:32:06,433
we were noticing in chat that we'd like to kind of talk about

507
00:32:06,450 --> 00:32:06,466
and address.

508
00:32:06,483 --> 00:32:10,466
>> Exactly. So one of the questions had come up around case sensitivity.

509
00:32:11,266 --> 00:32:16,466
And again... so whenever you wonder how does PowerShell do things,

510
00:32:16,483 --> 00:32:20,316
think, hey, what would somebody who is severely flawed do.

511
00:32:20,400 --> 00:32:26,466
And of course that's your best predictor. So we try and be as

512
00:32:26,183 --> 00:32:30,466
case insensitive as possible. So wherever we have the opportunity,

513
00:32:30,483 --> 00:32:36,433
we make things case insensitive. There are however certain PowerShell

514
00:32:36,483 --> 00:32:40,466
commandlets, other teams that require case sensitivity. If that

515
00:32:40,483 --> 00:32:43,466
ever happens, it will be highlighted in the documentation.

516
00:32:44,483 --> 00:32:47,466
But if it's not highlighted in the documentation, you can assume

517
00:32:47,483 --> 00:32:48,466
case insensitivity.

518
00:32:48,483 --> 00:32:51,466
>> That's what my wife says. She says you're very case insensitive.

519
00:32:51,483 --> 00:32:55,466
I said no, I'm very case sensitive. She said no very case insensitive.

520
00:32:56,483 --> 00:32:59,466
Then I have to show her comparison operators where you can specify.

521
00:32:59,483 --> 00:33:02,466
But, no, I'm very... anyways.

522
00:33:02,483 --> 00:33:04,466
>> That almost worked.

523
00:33:04,483 --> 00:33:07,400
>> It almost worked. Back to you. You wanted to do some more

524
00:33:07,450 --> 00:33:07,466
stuff on where.

525
00:33:08,483 --> 00:33:09,466
>> I wanted to party on where.

526
00:33:10,383 --> 00:33:14,466
Here's the thing with where. So originally we tried to design

527
00:33:14,483 --> 00:33:20,233
this where. So let's refresh our memory. So we have get process.

528
00:33:20,483 --> 00:33:25,466
That's too many things. So then what we said was we want to filter this.

529
00:33:25,483 --> 00:33:29,466
So we pipe this to where. Right? And we have a squiggle brackets.

530
00:33:29,483 --> 00:33:31,466
Now, originally the way this worked was

531
00:33:33,333 --> 00:33:38,466
we hired some smart guys and we said, hey, we need SQL against

532
00:33:38,483 --> 00:33:44,466
objects against live .NET objects. And they said uh-huh, they

533
00:33:44,483 --> 00:33:48,466
said go at it my friend this will be straightforward. Let months

534
00:33:48,483 --> 00:33:53,466
later they came back and they had only done a small subset and

535
00:33:53,483 --> 00:33:59,0
the syntax was wonky and it was just clear, oh, that's why SQL

536
00:33:59,483 --> 00:34:01,466
has like a couple hundred guys working on this. Turns out it's

537
00:34:01,483 --> 00:34:02,466
some hard problem.

538
00:34:02,483 --> 00:34:03,233
>> It's hard.

539
00:34:04,166 --> 00:34:07,233
>> So we took a different approach. And what we did we threw

540
00:34:07,316 --> 00:34:10,466
all that code away like three months of code, threw it away and

541
00:34:10,483 --> 00:34:15,183
literally, literally we replaced it with three lines of code.

542
00:34:15,266 --> 00:34:17,466
Three lines of code. And here's the kicker.

543
00:34:17,483 --> 00:34:19,466
>> Does that mean we can police all the SQL guys now too.

544
00:34:19,483 --> 00:34:24,300
>> It's far more powerful than SQL. Wait a second. Three lines

545
00:34:24,383 --> 00:34:26,466
of code far more powerful than SQL I'll prove it to you.

546
00:34:26,483 --> 00:34:27,466
That's pretty bold.

547
00:34:28,483 --> 00:34:30,466
Here's the three lines of code.

548
00:34:30,483 --> 00:34:36,216
So where basically takes each object that comes in the pipeline.

549
00:34:36,483 --> 00:34:40,466
It assigns it to a variable. Step number one. Assign it to a variable.

550
00:34:40,483 --> 00:34:43,466
Dollar sign under bar. Now it's dollar sign under bar and now

551
00:34:43,483 --> 00:34:48,416
dollar PS item. We assign it to a variable. The second is we

552
00:34:48,483 --> 00:34:52,466
evaluate the code within the squiggle brackets. We run the code.

553
00:34:53,483 --> 00:34:54,316
And three,

554
00:34:55,483 --> 00:35:02,466
if the code returns true, we pass the object on and if it doesn't,

555
00:35:02,483 --> 00:35:03,466
we throw it away.

556
00:35:04,483 --> 00:35:09,466
So it's that simple. So, now notice... so that's why you're

557
00:35:09,483 --> 00:35:11,466
able to do things like, hey,

558
00:35:13,483 --> 00:35:21,466
handles greater than 1,000. 1,000. Okay. So we grab the current object.

559
00:35:21,483 --> 00:35:25,366
Notice here the first object here is... oh let's see, this thing.

560
00:35:25,450 --> 00:35:27,466
And it's handles is 82.

561
00:35:27,483 --> 00:35:30,466
So we take this object, which is the row.

562
00:35:31,316 --> 00:35:35,466
We assign it to dollar sign underbar. And then we evaluate this.

563
00:35:35,483 --> 00:35:39,466
Hey, are the handles greater than 1,000? The answer is false.

564
00:35:40,483 --> 00:35:43,466
So you're going to see that object doesn't get passed on.

565
00:35:43,233 --> 00:35:47,466
If ever it's true, we then pass on the object as it is. And you

566
00:35:47,483 --> 00:35:53,466
see all the things are greater than 100. Now, remember the algorithm.

567
00:35:53,483 --> 00:35:56,466
It's important to memorize the algorithm. There are very few

568
00:35:56,483 --> 00:35:59,466
things you memorize in PowerShell. This is one of them.

569
00:35:59,483 --> 00:36:04,350
Assign the object to dollar sign under bar. Evaluate the code.

570
00:36:04,433 --> 00:36:07,466
If the code evaluates to true, pass the object on. If it evaluates

571
00:36:07,483 --> 00:36:09,466
to false, don't do that.

572
00:36:09,483 --> 00:36:14,466
Now, notice I never said that you had to use the object in the expression.

573
00:36:15,483 --> 00:36:19,466
Right? So what's that mean? So I could have said now here I'm

574
00:36:19,483 --> 00:36:23,466
going to limit it. I'm going to say star SS. We'll do a subset.

575
00:36:23,483 --> 00:36:26,466
Makes it a little easier. I can say where

576
00:36:28,483 --> 00:36:29,466
dollar sign false.

577
00:36:30,483 --> 00:36:31,466
Notice I didn't use dollar sign under bar.

578
00:36:33,483 --> 00:36:36,466
Nothing passed on. Because it always evaluates to false.

579
00:36:36,483 --> 00:36:40,466
Notice I can say dollar sign true. And it always succeeds.

580
00:36:40,483 --> 00:36:44,166
Okay. So what I'm really talking about... so that's literally

581
00:36:44,483 --> 00:36:46,466
how it works. This isn't a joke. That's literally how it works.

582
00:36:46,483 --> 00:36:51,466
Now the point is these are not very useful. And this is useful.

583
00:36:51,483 --> 00:36:54,466
But the thing I want to point out here is that you just run the code.

584
00:36:54,483 --> 00:36:58,466
The code can do anything. In this example, it's a simple expression.

585
00:36:59,283 --> 00:37:02,466
But you could have put a very complex expression. You could

586
00:37:02,483 --> 00:37:06,466
have put a script. You could have put ten pages worth of code here.

587
00:37:06,483 --> 00:37:09,333
Calling up your mother to ask her opinion on things.

588
00:37:09,416 --> 00:37:12,300
Looking things up in Active Directory. Checking things in SQL

589
00:37:12,383 --> 00:37:15,466
you can do anything you want in the end it has to evaluate to

590
00:37:15,166 --> 00:37:18,466
true or false and that's how it works. It's incredibly powerful.

591
00:37:18,483 --> 00:37:20,466
There's one other thing I wanted to say about where.

592
00:37:21,483 --> 00:37:24,466
That is a lot of people who begin with PowerShell look at these

593
00:37:25,0 --> 00:37:28,466
squiggle brackets and they said aaah. It's like mouse.

594
00:37:29,466 --> 00:37:33,466
And so we have a very simplified version of where. Now, this

595
00:37:33,483 --> 00:37:37,466
isn't as rich as this where. With the squiggle brackets you can

596
00:37:37,483 --> 00:37:41,466
do anything. The simplified where you can do very subset of things.

597
00:37:41,483 --> 00:37:45,466
You can do things where, a property, operator value. So what

598
00:37:45,483 --> 00:37:48,300
you do... and you don't have to have the squiggle brackets.

599
00:37:48,383 --> 00:37:50,466
There you go. There's the deal. And you don't have to have dollar

600
00:37:50,483 --> 00:37:51,466
sign under bar.

601
00:37:52,483 --> 00:37:56,166
So you get rid of that. And you can just say where handles greater

602
00:37:56,250 --> 00:37:57,466
than 1,000.

603
00:37:58,483 --> 00:38:00,466
And voila, it works.

604
00:38:00,483 --> 00:38:03,333
>> And I think for a lot of admins getting started especially

605
00:38:03,416 --> 00:38:05,466
with filtering because filtering is going to be one of the most

606
00:38:05,483 --> 00:38:06,466
important things you do.

607
00:38:07,483 --> 00:38:10,466
This simplified syntax can be really helpful at first until you

608
00:38:10,483 --> 00:38:14,466
get more used to the squiggly brackets. Now, like Jeffrey said,

609
00:38:14,483 --> 00:38:16,466
though, there are limitations there. As soon as you want to

610
00:38:16,483 --> 00:38:20,383
start doing multiple criteria and as soon as you want it to call

611
00:38:20,466 --> 00:38:23,466
up your mother and check with her first, that's going to require

612
00:38:23,483 --> 00:38:25,466
the squiggly brackets. But I really like the simplified...

613
00:38:25,483 --> 00:38:28,316
>> Can I tell you I use this thing all the time.

614
00:38:28,400 --> 00:38:29,466
>> The simplified one.

615
00:38:29,483 --> 00:38:32,466
>> As a matter of fact, when we look at doing some remoting stuff

616
00:38:32,483 --> 00:38:35,466
with software and all that, I'll just use where install.

617
00:38:36,433 --> 00:38:39,466
Make it short and sweet. It's going to get really cool, guys.

618
00:38:40,483 --> 00:38:41,466
That was awesome.

619
00:38:42,483 --> 00:38:45,466
Okay. Let's get serious for a moment.

620
00:38:47,483 --> 00:38:49,466
Maybe you ought to keep us both on screen because we both have

621
00:38:49,483 --> 00:38:50,466
to have this serious look on our face.

622
00:38:53,483 --> 00:38:54,466
We're going to go into the pipeline now.

623
00:38:55,483 --> 00:38:58,466
But deeper. Deeper. Deeper.

624
00:38:58,483 --> 00:39:01,466
>> You're committing all sorts of HR violations today.

625
00:39:02,333 --> 00:39:04,466
You're just like Captain Inappropriate.

626
00:39:05,483 --> 00:39:06,466
>> Packman.

627
00:39:06,483 --> 00:39:07,466
>> Inappropriate.

628
00:39:08,483 --> 00:39:09,466
>> Here's the deal.

629
00:39:10,233 --> 00:39:12,466
What we're going to show you is something that's very advanced.

630
00:39:12,483 --> 00:39:17,333
And you need to know this. You need to know this. But what's

631
00:39:17,416 --> 00:39:19,466
going to happen is that you're going to see the concept here

632
00:39:19,483 --> 00:39:22,466
and it's going to happen really quick and then you're going to

633
00:39:22,183 --> 00:39:24,466
need to practice this, and you're going to have problems practicing this.

634
00:39:24,483 --> 00:39:27,466
So I'm going to give you a couple of references right now before

635
00:39:27,483 --> 00:39:31,250
we get started. First of all, you're going to want chapter 9

636
00:39:31,333 --> 00:39:33,466
out of Don Jones's book lunches...

637
00:39:34,483 --> 00:39:37,466
>> PowerShell and a Month of Lunches.

638
00:39:37,483 --> 00:39:42,466
>> Learn Windows PowerShell in a Month of Lunches, chapter 9 you'll

639
00:39:42,483 --> 00:39:45,466
want that chapter, and it will take you through everything that

640
00:39:45,483 --> 00:39:48,466
we're going to do and you'll get a chance to try it. Let me

641
00:39:48,483 --> 00:39:51,433
tell you how important it was. I was sitting if you've been to

642
00:39:51,483 --> 00:39:54,466
a conference before, I'm sure you have been, I was sitting in

643
00:39:54,483 --> 00:39:58,466
a conference and you know they had the... you know like TechEd,

644
00:39:58,483 --> 00:40:02,466
they're enormous. They put speakers... they put the rooms over

645
00:40:02,483 --> 00:40:06,466
there and rooms over here and a football field in the middle.

646
00:40:06,483 --> 00:40:10,466
Now, that's where all the sponsors go. But there's this giant

647
00:40:10,483 --> 00:40:13,400
football field and they don't put a lot of seats in there.

648
00:40:13,483 --> 00:40:15,466
So you see all these people sitting up against the wall and working

649
00:40:15,483 --> 00:40:19,433
on stuff. Well, I was sitting up against the wall working on

650
00:40:19,483 --> 00:40:23,316
a problem with getting two commandlets to work together in Exchange.

651
00:40:23,400 --> 00:40:27,466
I couldn't get it to work together and I said to myself, I said:

652
00:40:29,483 --> 00:40:32,466
It's a problem with the guys that wrote the commandlets.

653
00:40:32,483 --> 00:40:36,466
It's a problem with PowerShell it just doesn't work I just can't

654
00:40:36,483 --> 00:40:41,233
solve that problem. And not but a few moments later you and then

655
00:40:41,316 --> 00:40:46,466
shortly after that Don Jones, you taught me how to figure out

656
00:40:46,483 --> 00:40:50,466
how the pipeline works and suddenly, with this knowledge, suddenly

657
00:40:51,483 --> 00:40:53,466
I could get that solution to work. And I guess what the moral

658
00:40:53,483 --> 00:40:58,200
of the story is is that as soon as you understand this, the answer

659
00:40:58,283 --> 00:41:02,466
is you can always get it to work. So never give up. It's just...

660
00:41:02,483 --> 00:41:04,250
it's a little tricky at first.

661
00:41:04,333 --> 00:41:06,466
>> This is one of those things I used to have a physics professor

662
00:41:06,483 --> 00:41:11,466
who would say this problem is simple once it's solved. So we're

663
00:41:11,483 --> 00:41:14,466
going to help you solve it. When you first look at it you're

664
00:41:14,483 --> 00:41:17,466
like what the heck, what the heck and then at some point there

665
00:41:17,483 --> 00:41:20,466
will be this moment of clarity and it's super super simple.

666
00:41:20,483 --> 00:41:22,466
It really is.

