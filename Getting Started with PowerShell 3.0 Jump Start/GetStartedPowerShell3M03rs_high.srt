1
00:00:00,483 --> 00:00:08,466
[Music]

2
00:00:17,483 --> 00:00:18,466
>> So our third topic for the day

3
00:00:18,483 --> 00:00:20,466
is getting connected with the pipeline.

4
00:00:20,483 --> 00:00:23,466
And the first thing is, yeah, we're going to go through all of this.

5
00:00:23,483 --> 00:00:27,466
So there's the cute module overview. But take a look at this,

6
00:00:27,483 --> 00:00:29,466
what's the pipeline? First of all, look at the character here.

7
00:00:29,483 --> 00:00:33,466
See this character? This is located above... like it says right

8
00:00:33,483 --> 00:00:38,283
here located above your Enter key. And the reason I say it like

9
00:00:38,366 --> 00:00:41,466
that because a lot of folks don't even know where this character is.

10
00:00:41,200 --> 00:00:42,466
Let me give you an example.

11
00:00:43,483 --> 00:00:49,166
So get-service pipe.

12
00:00:50,166 --> 00:00:52,466
What's going to happen is get-service is going to go out and

13
00:00:52,483 --> 00:00:56,466
get a selection of service objects; they're technically called

14
00:00:56,483 --> 00:00:59,466
service controllers and you're going to see what all that is later.

15
00:00:59,483 --> 00:01:04,466
But it's going to grab all of those services and then it's going

16
00:01:04,216 --> 00:01:07,466
to send them. And I'm not talking about a text representation;

17
00:01:07,483 --> 00:01:11,466
I'm talking about the actual service objects themselves.

18
00:01:11,483 --> 00:01:14,466
It's going to send them one at a time across this pipeline.

19
00:01:14,483 --> 00:01:20,183
What do you want to do next to these services? Well, let's narrow

20
00:01:20,266 --> 00:01:23,466
this down a little bit. Let's just do the name Bits.

21
00:01:24,450 --> 00:01:25,466
Take a look. It's running.

22
00:01:26,483 --> 00:01:28,466
Take a guess what I could do if I wanted to stop this service.

23
00:01:28,483 --> 00:01:33,250
You probably could guess that there is a commandlet called stop-service,

24
00:01:33,333 --> 00:01:35,466
and you would be correct. There is. There's one called stop-service.

25
00:01:36,483 --> 00:01:39,466
And you can specify a name. But here's the interesting thing,

26
00:01:41,483 --> 00:01:43,466
I can pipe it to stop-service

27
00:01:45,266 --> 00:01:46,233
if I could type it.

28
00:01:47,483 --> 00:01:50,466
Here's what's going to happen, we're going to take that bit service,

29
00:01:50,483 --> 00:01:52,466
we're going to send it across that pipeline. Stop service is

30
00:01:52,483 --> 00:01:55,466
going to grab hold of that and do exactly what it says it's going

31
00:01:55,483 --> 00:01:58,400
to do, it's going to stop the service. Now we're going to talk

32
00:01:58,483 --> 00:02:01,400
a little bit later in more detail about how this pipeline works

33
00:02:01,483 --> 00:02:04,250
because it's crucially important in trouble shooting. But just

34
00:02:04,333 --> 00:02:04,466
take a look.

35
00:02:05,483 --> 00:02:07,466
Wow, I wonder what it did? Well, let's run.

36
00:02:08,483 --> 00:02:13,383
Ah, it stopped it. Now I can pipe and I can even say start service.

37
00:02:13,466 --> 00:02:16,466
And I'm going to use a pass-through on here that'll show me the

38
00:02:16,483 --> 00:02:17,466
results of what I'm doing.

39
00:02:18,483 --> 00:02:21,466
And now it's started again. Now I know that's a simple pipeline

40
00:02:22,483 --> 00:02:26,366
but that concept of taking something, sending it across the pipeline

41
00:02:26,450 --> 00:02:29,466
to have something else act on it, is very important. And we

42
00:02:29,483 --> 00:02:33,466
can continue. We can pipe from one thing to the next thing to

43
00:02:33,483 --> 00:02:37,466
the next thing. So as an example, let's start out with a couple

44
00:02:37,183 --> 00:02:40,0
of cool things. Oh, hey first of all, Jeffrey, what do you think,

45
00:02:40,483 --> 00:02:42,466
I just love to ask people this... Ooh, don't... Be careful

46
00:02:42,483 --> 00:02:45,466
with the Enter key. What do you

47
00:02:46,483 --> 00:02:47,466
think, Jeffrey?

48
00:02:48,483 --> 00:02:50,466
Is that going to do what I think it's going to do?

49
00:02:50,483 --> 00:02:52,466
>> Yeah, you don't want to do that.

50
00:02:52,483 --> 00:02:53,466
>> I know.

51
00:02:53,483 --> 00:02:57,466
>> Guys, we're going to show you. The pipeline is very powerful.

52
00:02:57,483 --> 00:03:00,466
It can also allow you to make silly mistakes.

53
00:03:01,483 --> 00:03:05,166
>> It's worth pointing out, PowerShell is a powerful tool

54
00:03:06,483 --> 00:03:08,283
like a really sharp knife.

55
00:03:08,483 --> 00:03:12,466
A really sharp knife is super, super useful. You probably don't

56
00:03:12,483 --> 00:03:13,466
want to give it to your kids, right?

57
00:03:14,483 --> 00:03:18,466
You want to be thoughtful about this stuff. PowerShell, you

58
00:03:18,483 --> 00:03:23,433
can do some damaging things and so often we give you techniques

59
00:03:23,483 --> 00:03:27,466
to deal with that but, indeed, don't complain if you say, "Oh,

60
00:03:27,183 --> 00:03:30,433
well, geez I removed all the files from my file system.

61
00:03:30,483 --> 00:03:35,466
Darn, PowerShell." By the way I did that actually. I was giving

62
00:03:35,216 --> 00:03:38,466
an example of how to do this and the guards that we have, and

63
00:03:38,483 --> 00:03:41,466
I forgot to put that in. And I hit carriage return. And it turns

64
00:03:41,483 --> 00:03:44,433
out if you kill lsass, bad things happen.

65
00:03:44,450 --> 00:03:44,466
>> Bad things.

66
00:03:44,483 --> 00:03:46,466
>> Bad things happen. Especially when you're in front of like

67
00:03:46,483 --> 00:03:48,466
700 people doing a demo.

68
00:03:49,166 --> 00:03:50,466
>> Very bad things happen.

69
00:03:50,483 --> 00:03:52,466
>> I strongly do not recommend that.

70
00:03:52,483 --> 00:03:55,466
>> Because I've hit the Enter on the get-service, stop-service,

71
00:03:55,233 --> 00:03:57,466
and it's just not cool. PowerShell doesn't ask you, "Are you

72
00:03:57,483 --> 00:04:01,300
sure?" until later on when we show you how you can get it to.

73
00:04:01,383 --> 00:04:04,466
But it doesn't. So it assumes you know what you're doing.

74
00:04:04,483 --> 00:04:08,400
Let me do an example here of another pipeline thing. Let's talk

75
00:04:08,483 --> 00:04:13,466
about CSV's for example. Here's a commandlet, export CSV.

76
00:04:13,483 --> 00:04:16,466
Guess what export CSV is going to do? It's going to take this

77
00:04:16,483 --> 00:04:20,466
information and export it to a CSV. And so I'm going to put

78
00:04:20,483 --> 00:04:23,466
in a path of C colon... Let's just call it service.csv.

79
00:04:25,483 --> 00:04:28,466
You guys know what a CSV is, comma separated file. And, yes,

80
00:04:28,483 --> 00:04:30,466
you can change the delimiters. If you look at the help file for

81
00:04:30,483 --> 00:04:34,466
export CSV, you can change the delimiters and modify how it works.

82
00:04:34,483 --> 00:04:37,466
But let's take a look at this CSV. I'm going to open this up

83
00:04:37,483 --> 00:04:42,466
in Notepad, not the correct tool for looking at a CSV because

84
00:04:42,483 --> 00:04:44,466
it's going to look at this text file. But I just want you to see...

85
00:04:45,483 --> 00:04:48,466
Yep, it's all comma separated. But here's one of the interesting

86
00:04:49,483 --> 00:04:52,466
rules about PowerShell is if you can export it, you're going

87
00:04:52,483 --> 00:04:54,466
to want to import it at some point. You're going to want to

88
00:04:54,483 --> 00:04:56,466
work with that data again.

89
00:04:57,483 --> 00:05:03,433
So if you can export it, you can import the CSV. So import CSV.

90
00:05:06,233 --> 00:05:09,466
I forgot what I called it. Oh, not that. There we go. And now

91
00:05:09,483 --> 00:05:12,466
all the data comes back and it's formatted correctly and it's

92
00:05:12,483 --> 00:05:16,200
attached correctly so I can actually work with it now. Now there

93
00:05:16,283 --> 00:05:19,466
are simple examples of the pipeline but we're also showing you

94
00:05:19,483 --> 00:05:22,466
some great export stuff. So besides exporting

95
00:05:23,483 --> 00:05:25,466
like to a CSV...

96
00:05:26,483 --> 00:05:27,466
There's my favorite.

97
00:05:29,350 --> 00:05:34,466
Oops. Command line XML. I love XML. XML is the greatest thing

98
00:05:34,483 --> 00:05:35,466
since the automation of sliced bread.

99
00:05:37,333 --> 00:05:40,266
Great example, you guys that used to do online banking: years

100
00:05:40,350 --> 00:05:44,466
ago you'd buy something and swipe your credit card, three days

101
00:05:44,483 --> 00:05:47,466
later it would show up in your account. Today you swipe and

102
00:05:47,483 --> 00:05:50,466
when does it show up in your account? Just as it finishes swiping.

103
00:05:51,366 --> 00:05:53,466
XML, baby. It's XML.

104
00:05:54,483 --> 00:05:58,466
So let's export to XML. And here's what I'm going to do, instead

105
00:05:58,483 --> 00:05:59,466
of doing get-service,

106
00:06:01,466 --> 00:06:02,466
I'm going to do get-process.

107
00:06:03,483 --> 00:06:08,466
I like that. And I'm going to pretend; I'm going to call this

108
00:06:08,483 --> 00:06:13,433
good XML. I want you to pretend something for a second. I want

109
00:06:13,483 --> 00:06:17,466
you to pretend that I've taken a snapshot of a perfectly good

110
00:06:17,483 --> 00:06:20,466
running machine. It runs perfectly.

111
00:06:21,466 --> 00:06:25,466
And I've just snapshotted it's processes. Now if you blink your

112
00:06:25,483 --> 00:06:29,466
eyes, pretend for a moment that now I'm working on a non-perfectly

113
00:06:30,183 --> 00:06:31,216
running machine.

114
00:06:33,483 --> 00:06:37,233
And what I'd like to do is I'd like to compare

115
00:06:38,483 --> 00:06:42,233
the good machine to the non-good machine.

116
00:06:42,483 --> 00:06:46,466
>> Yeah, instead of those notepad and calc, imagine that was some malware.

117
00:06:46,483 --> 00:06:52,433
>> Yeah, exactly. I'm just using notepad and calc. Now compare object.

118
00:06:52,483 --> 00:06:55,466
I'm just giving you an example of how the pipeline and how using

119
00:06:55,483 --> 00:06:59,466
commandlets can be very useful to you. So I've got a reference object.

120
00:06:59,483 --> 00:07:02,466
Now I want you to notice I'm going to use parentheses.

121
00:07:02,483 --> 00:07:04,466
We're going to talk more about parentheticals. But this means,

122
00:07:04,483 --> 00:07:09,300
do this first. And what I need to do is I need to import the

123
00:07:09,383 --> 00:07:12,466
good XML file that represents the good machine.

124
00:07:13,483 --> 00:07:19,466
And then, I want to compare that to this currently running machine.

125
00:07:19,483 --> 00:07:23,383
Now when you run get-process, there is a lot of information that

126
00:07:23,466 --> 00:07:26,466
comes up. What I want is I just want it to compare the names

127
00:07:26,483 --> 00:07:29,466
of the processes right now and see if there is a difference.

128
00:07:29,483 --> 00:07:33,283
So what I've done is I've exported my process information with

129
00:07:33,366 --> 00:07:35,466
the pipeline, and now I'm just going to compare it.

130
00:07:36,483 --> 00:07:41,466
Notice the site indicator points to the bad machine and is saying,

131
00:07:41,483 --> 00:07:45,466
"Hey look, calc and notepad are running on that," as opposed

132
00:07:45,483 --> 00:07:48,466
to what's on the good machine. This is an example of how you're

133
00:07:48,483 --> 00:07:51,466
going to start to be able to build commands with the pipeline

134
00:07:51,483 --> 00:07:56,466
to do something and then use other commands to achieve your results.

135
00:07:56,183 --> 00:07:59,466
Imagine comparing two machines, the software that's installed

136
00:07:59,483 --> 00:08:03,333
on them, and you want to make one machine look just like another.

137
00:08:03,483 --> 00:08:06,466
So there are a lot of things that we can do with building a pipeline.

138
00:08:06,483 --> 00:08:08,466
One last example and then we'll take a short break.

139
00:08:08,483 --> 00:08:09,283
>> Can I just point out...

140
00:08:09,366 --> 00:08:09,466
>> Oh, yeah.

141
00:08:09,483 --> 00:08:12,466
>> So what Jason just showed you is freakishly powerful and we're

142
00:08:12,483 --> 00:08:17,283
going to drill into it in the future. So what we did is we took

143
00:08:17,366 --> 00:08:22,466
a set of live objects and we compared them against an XML file.

144
00:08:22,483 --> 00:08:26,166
Like how do you do that? And the answer is the magic of PowerShell

145
00:08:26,250 --> 00:08:29,466
and these things we call objects and object adapters. And of

146
00:08:29,483 --> 00:08:32,333
course if you just tried to compare these things, it would say,

147
00:08:32,483 --> 00:08:34,466
"They're completely different." So he did and he said, "I just

148
00:08:34,483 --> 00:08:37,466
want to compare them based upon their name." And so what you've

149
00:08:38,483 --> 00:08:42,166
done, what we've really kind of led you to is, again, you think

150
00:08:42,250 --> 00:08:45,466
about what you want to do, you type it and the magic of PowerShell

151
00:08:45,483 --> 00:08:50,466
is able to take this incredibly complex stuff and present it

152
00:08:50,483 --> 00:08:52,466
to you in a very simple world.

153
00:08:52,483 --> 00:08:55,466
>> So let me show you a couple other command line things and Jeffrey

154
00:08:55,483 --> 00:08:59,466
will be adding in stuff here just so you can get the idea of

155
00:08:59,483 --> 00:09:04,0
kind of what's going on. Besides exporting out to like CSV's

156
00:09:04,483 --> 00:09:07,466
and XML, there are some other things you can do. So get-service.

157
00:09:07,483 --> 00:09:10,466
Everybody always wants to know, "How do I put something into

158
00:09:10,483 --> 00:09:14,466
just a text file?" Well, first of all you could've found out-file

159
00:09:15,0 --> 00:09:18,466
by looking for get-help star file or something like that which

160
00:09:18,483 --> 00:09:22,466
is totally awesome. And you'll find out-file. Out-file, if you

161
00:09:23,0 --> 00:09:25,466
look at the help file for it, wants you to give it a path.

162
00:09:26,483 --> 00:09:29,466
And you give it a path to what you want to use

163
00:09:31,350 --> 00:09:33,466
for your text file. So test.txt.

164
00:09:34,483 --> 00:09:36,466
and you can get the content...

165
00:09:37,483 --> 00:09:42,466
Did I say get the content? You can get the content from a text file...

166
00:09:42,483 --> 00:09:45,466
You know, I wonder if there is anything that could help me with

167
00:09:46,483 --> 00:09:51,466
getting content from a text file. Oh lookie, get-content.

168
00:09:52,283 --> 00:09:57,216
Help system is your friend. So you can get the content from a

169
00:09:57,300 --> 00:09:59,466
text file by just using get-content.

170
00:10:01,483 --> 00:10:06,466
And I think I called that test.txt, and there's all that get-service

171
00:10:06,483 --> 00:10:10,466
content that I just put into a text file. But wait, there's more.

172
00:10:10,483 --> 00:10:15,466
You can send stuff out to a printer. Out to a printer. Out printer.

173
00:10:15,483 --> 00:10:17,0
Out printer? Hmm?

174
00:10:17,483 --> 00:10:19,466
>> So there's a set of things you could send it out to.

175
00:10:19,483 --> 00:10:25,466
>> I wonder how we could find a list of the things that we could

176
00:10:25,483 --> 00:10:28,466
send stuff out to.

177
00:10:29,483 --> 00:10:31,466
>> Yeah, no. Just out. Just start with out.

178
00:10:31,483 --> 00:10:35,466
>> Start with out, yeah. Well, here, look. There's a ton of stuff

179
00:10:35,483 --> 00:10:37,316
that we can send for out.

180
00:10:38,483 --> 00:10:43,466
So again the help file is your friend. Besides sending stuff

181
00:10:43,483 --> 00:10:47,266
out, there's also creative ways to do stuff. So get-service...

182
00:10:47,483 --> 00:10:49,466
I love this. This is one of my favorite things. We also have

183
00:10:49,483 --> 00:10:54,466
convert to commandlets. Convert to CSV. Now this is going to

184
00:10:54,483 --> 00:10:58,466
make more sense later. But, well, you just had an export CSV.

185
00:10:58,483 --> 00:11:01,466
Yeah, and we have a convert to CSV. The difference being for

186
00:11:01,483 --> 00:11:05,166
right now when you do an export CSV, you're done.

187
00:11:05,483 --> 00:11:06,466
You're done.

188
00:11:07,350 --> 00:11:09,466
When you do a convert to CSV, we're going to leave that stuff

189
00:11:09,483 --> 00:11:12,466
in the pipeline in case you want to pipeline it and do other

190
00:11:12,483 --> 00:11:13,466
things to it.

191
00:11:13,483 --> 00:11:14,466
>> The way I think about it?

192
00:11:14,483 --> 00:11:15,166
>> Yeah.

193
00:11:15,483 --> 00:11:19,466
>> Is export is convert coupled with output it to a file.

194
00:11:20,483 --> 00:11:24,466
>> Yeah, excellent, excellent because, if you do an export CSV,

195
00:11:24,483 --> 00:11:27,333
you have a mandatory where you have to send it to a file.

196
00:11:27,483 --> 00:11:32,466
So think of it as a convert with an out-file already built right in.

197
00:11:32,483 --> 00:11:35,466
So we have the converts but I want to show you one of my favorite ones.

198
00:11:37,483 --> 00:11:38,466
He, he, he, he, he.

199
00:11:40,333 --> 00:11:41,466
[Laughter]

200
00:11:41,483 --> 00:11:45,416
Did I mention I was a web guy? Anyways, and I want to

201
00:11:45,483 --> 00:11:47,466
pick just a couple of properties for this; I'm going to take

202
00:11:47,483 --> 00:11:51,466
name and status. The reason I knew that convert to HTML has a

203
00:11:51,483 --> 00:11:55,466
dash property parameter and it had Chihuahuas that would take

204
00:11:55,483 --> 00:11:59,350
multiple arguments is because I looked at the help file. So it's

205
00:11:59,433 --> 00:12:02,166
going to convert it to, as you would expect, HTML. And at this

206
00:12:02,250 --> 00:12:05,466
point, ah, there it did it. It's the cleanest HTML, by the way.

207
00:12:06,483 --> 00:12:10,200
It did exactly what I asked it to do, but here's an example of

208
00:12:10,283 --> 00:12:14,466
me saying, "Look, I don't want it to my screen. I now want in

209
00:12:14,483 --> 00:12:18,466
a file. I want it out to a file." So let's pipe it out-file,

210
00:12:19,483 --> 00:12:22,466
and let's call this just test.htm.

211
00:12:23,483 --> 00:12:24,466
And you guys know, if you have a...

212
00:12:24,483 --> 00:12:27,283
>> Can you reduce your... go down a little bit more?

213
00:12:27,366 --> 00:12:27,466
>> Oh, yeah, yeah, yeah.

214
00:12:27,483 --> 00:12:28,200
>> It's getting cut off.

215
00:12:28,283 --> 00:12:30,350
>> Yeah, yeah, yeah, yeah. Thanks, guys, for telling us about

216
00:12:30,433 --> 00:12:33,300
that in the discussion thing. I want to lower my command down

217
00:12:33,383 --> 00:12:33,433
so that...

218
00:12:33,450 --> 00:12:33,466
>> Yeah, now you can see the...

219
00:12:33,483 --> 00:12:34,466
>> ...picture in a picture...

220
00:12:34,483 --> 00:12:35,466
>> In all its glory.

221
00:12:35,483 --> 00:12:39,466
>> In all of its beautiful glory. And you guys know that if you double-click...

222
00:12:39,483 --> 00:12:42,466
Did I say double-click? Yes, I said double-click... on an HTM

223
00:12:42,483 --> 00:12:45,466
it'll pop. Well, see no more double-clicking. No more mouse.

224
00:12:45,483 --> 00:12:49,466
No more mouse. So what I'm going to do is just say C colon test.htm

225
00:12:50,483 --> 00:12:54,466
and PowerShell will launch it up there for me. Do you get I

226
00:12:54,483 --> 00:12:57,466
just made a web page?

227
00:12:58,483 --> 00:12:59,466
How many developers did that take?

228
00:13:00,483 --> 00:13:06,466
And if you look at the help for convert to HTML, you're going

229
00:13:06,483 --> 00:13:10,466
to find that you have a lot of options to make this pretty.

230
00:13:10,483 --> 00:13:13,466
There are a lot of ways to make this very pretty with tables

231
00:13:14,483 --> 00:13:17,466
and all kinds of... using style sheets and so forth. So it pays

232
00:13:17,483 --> 00:13:20,466
to look at the help. But this is a good example of piping from

233
00:13:20,483 --> 00:13:24,466
one command to another to achieve a certain result.

234
00:13:25,283 --> 00:13:27,466
So, let's take a look at what else we got going.

235
00:13:27,483 --> 00:13:32,466
We got to the web page, and these are just some examples of piping

236
00:13:32,483 --> 00:13:35,466
some stuff. Oh, we're going to have to talk about stuff that

237
00:13:35,483 --> 00:13:38,466
kills because I almost screwed up earlier.

238
00:13:38,483 --> 00:13:40,366
>> Yeah, this is fun. This is fun.

239
00:13:40,450 --> 00:13:43,266
>> So let me... And, Jeffrey, you can help me out here with this one.

240
00:13:43,350 --> 00:13:43,466
>> Yeah, yeah.

241
00:13:43,483 --> 00:13:45,233
>> Because I'm going to get-service

242
00:13:46,483 --> 00:13:47,466
and I'm going to do stop-service.

243
00:13:49,366 --> 00:13:52,200
And I want to know if this works or not, but it seems kind of

244
00:13:52,283 --> 00:13:53,216
risky to me.

245
00:13:53,300 --> 00:13:53,466
>> Yeah.

246
00:13:54,316 --> 00:13:55,466
>> What can I do?

247
00:13:55,483 --> 00:13:58,466
>> When in trouble, fear or doubt, run in circles, scream and shout.

248
00:13:58,483 --> 00:13:59,466
[Laughter]

249
00:13:59,483 --> 00:14:03,433
That's what they used to teach you.

250
00:14:03,450 --> 00:14:03,466
>> Okay.

251
00:14:03,483 --> 00:14:07,466
>> That's what they used to teach kids in Boy Scouts when you

252
00:14:07,483 --> 00:14:08,466
go on a trip.

253
00:14:09,483 --> 00:14:13,383
So, no, here's the thing: when you're ever... So I once dealt

254
00:14:13,466 --> 00:14:16,283
with an admin who said, "You know, every now and again it's late

255
00:14:16,366 --> 00:14:18,466
and I'm doing something, and I realize I'm about to hit carriage

256
00:14:18,483 --> 00:14:21,466
return or the Enter key. And I realize if I get it wrong, like

257
00:14:21,483 --> 00:14:25,466
that's the end. I'm going to be fired. Muffy and Buffy are not

258
00:14:25,483 --> 00:14:28,466
going to go to college. It's just going to be bad."

259
00:14:28,183 --> 00:14:29,466
>> It's going to be bad.

260
00:14:29,483 --> 00:14:31,466
>> And I thought myself, "Boy, what are we doing that we create

261
00:14:31,483 --> 00:14:34,466
an environment where somebody, that's the world that they have

262
00:14:34,216 --> 00:14:38,200
to live with." And so, in PowerShell if you ever have something

263
00:14:38,283 --> 00:14:42,466
that you're uncertain of, you can always type minus what if.

264
00:14:42,483 --> 00:14:45,433
Like, what if I did this? What would actually happen? And you

265
00:14:45,450 --> 00:14:45,466
would get...

266
00:14:46,166 --> 00:14:47,166
[Singing]

267
00:14:49,166 --> 00:14:53,466
>> And it tells you what it would do but it doesn't actually do it.

268
00:14:53,483 --> 00:14:58,383
>> Now the best part is that it tells you what it would do but

269
00:14:58,466 --> 00:15:01,466
it didn't actually do it. And if you look at my screen, it says,

270
00:15:02,483 --> 00:15:05,466
"Yeah, I would've stopped these services." Now if you're thinking

271
00:15:05,200 --> 00:15:08,466
to yourself that, oh, this is a nice fast way to shut down my computer.

272
00:15:08,483 --> 00:15:12,466
No, no, no, no. This is going to blue screen way before it shuts down.

273
00:15:12,483 --> 00:15:16,450
Well, it won't blue screen but it's going to stop somewhere around

274
00:15:16,483 --> 00:15:17,466
PowerShell service host.

275
00:15:17,483 --> 00:15:20,466
>> Muffy and Buffy would not be going to college after this one.

276
00:15:21,483 --> 00:15:23,466
>> Yeah. So you're not going to want to do that. But something

277
00:15:23,483 --> 00:15:24,466
to keep in mind,

278
00:15:25,483 --> 00:15:29,366
besides what if... And I use what if all the time because things

279
00:15:29,450 --> 00:15:33,466
can be dangerous that you're trying out. We also have dash confirm.

280
00:15:34,483 --> 00:15:39,366
And dash confirm is a what if with, "Do you actually want to

281
00:15:39,450 --> 00:15:42,466
do this?" Now I'm obviously not going to say yes to anything

282
00:15:42,483 --> 00:15:46,466
and certainly not yes to all. So I'm going to put my finger on

283
00:15:46,483 --> 00:15:49,466
the L right now so that nothing happens. But I want you to notice

284
00:15:49,483 --> 00:15:53,466
it is showing you both what it will do and then asking you, "Do

285
00:15:53,233 --> 00:15:56,466
you want me to do this?" So people ask all the time, "PowerShell

286
00:15:56,233 --> 00:15:58,466
doesn't ask me 'are you sure?'" Yeah, because PowerShell is not

287
00:15:58,483 --> 00:16:03,466
for sissies. But sometimes you need that capability. So I'm

288
00:16:03,166 --> 00:16:03,466
going to hit L.

289
00:16:04,483 --> 00:16:07,300
And, please, don't actually do anything.

290
00:16:07,383 --> 00:16:08,466
>> Yeah, that'd be good. Hey, can I show them something?

291
00:16:08,483 --> 00:16:09,466
>> Yeah.

292
00:16:09,483 --> 00:16:10,466
>> Okay, so

293
00:16:11,483 --> 00:16:13,466
at some level this isn't that interesting, right?

294
00:16:13,483 --> 00:16:15,466
Get-service pipe to stop-service.

295
00:16:17,483 --> 00:16:20,466
Minus what if. Okay, but who is going to do that? Right, you're

296
00:16:20,483 --> 00:16:24,466
just not going to do that. But, remember what I said earlier

297
00:16:25,333 --> 00:16:27,466
about this programming with hand grenades thing.

298
00:16:28,483 --> 00:16:33,466
What I said was, there's this Bits thing and I don't remember

299
00:16:33,483 --> 00:16:36,466
what the heck it was. So what I'm going to say is display name,

300
00:16:36,483 --> 00:16:41,466
something to do with Bits or maybe it was something to do with BI.

301
00:16:41,483 --> 00:16:43,466
And then, stop-service.

302
00:16:45,483 --> 00:16:49,316
Now, did I get that one right? Now this is the more realistic thing.

303
00:16:49,400 --> 00:16:52,466
Did I get that one right? Because maybe BI star maps to Bits

304
00:16:52,483 --> 00:16:56,366
service and maybe it doesn't. So what you do here is you say

305
00:16:56,450 --> 00:17:01,466
what if. And you're like, "Oh, oh, oh, oh. No. Good thing I

306
00:17:01,166 --> 00:17:04,466
didn't do that." Now at this point you could go and say, "Well,

307
00:17:04,483 --> 00:17:06,466
okay, why did that match? Oh I see: biometric.

308
00:17:07,483 --> 00:17:10,466
And then, oh, I see: compatibility." Now if you wanted to you

309
00:17:10,483 --> 00:17:14,466
could go in here and try and like tweak this thing, right, and

310
00:17:14,483 --> 00:17:17,466
do this. But instead you can say, "No, you know what, it's close

311
00:17:17,483 --> 00:17:18,466
enough." Confirm.

312
00:17:19,483 --> 00:17:22,466
And you say, "BitLocker, yep. That's the one I want to do it

313
00:17:22,483 --> 00:17:26,466
to." So you stop that. And then, this one you say, "Nope that

314
00:17:26,166 --> 00:17:31,466
was the only one." So you say no to the rest. And now I've stopped

315
00:17:32,483 --> 00:17:37,466
gsv bi. Nope, nope, nope, nope. I got the wrong one. Oh, you

316
00:17:37,483 --> 00:17:39,466
know what? I shouldn't have stopped BitLocker. That was a bad thing.

317
00:17:39,483 --> 00:17:40,466
>> Yeah, I think that might have been. >> Ooh.

318
00:17:42,483 --> 00:17:44,466
>> Well, great example of a practical use.

319
00:17:45,0 --> 00:17:46,0
[Laughter]

320
00:17:46,483 --> 00:17:49,466
Dash confirm. No, that's perfect.

321
00:17:49,233 --> 00:17:51,233
>> I am now out of compliance with corporate policy.

322
00:17:51,316 --> 00:17:52,466
>> There you are.

323
00:17:52,483 --> 00:17:53,466
>> These doors might come bursting open.

324
00:17:53,483 --> 00:17:54,466
>> Bursting open.

325
00:17:55,483 --> 00:17:57,466
>> Well, hopefully they...

326
00:17:57,183 --> 00:17:57,466
>> So let's start that.

327
00:17:57,483 --> 00:18:01,216
>> ...will not burst open. So, guys, this is your first introduction

328
00:18:01,300 --> 00:18:03,466
to the pipeline. We're going to go much deeper into this pipeline

329
00:18:04,483 --> 00:18:07,466
but the concept again is you have a commandlet. You're going

330
00:18:07,483 --> 00:18:11,400
to pipe the results of that commandlet to the next one. So do

331
00:18:11,483 --> 00:18:15,466
this then do this then do this then do this until your needs

332
00:18:15,483 --> 00:18:17,466
are done. And what you're going to notice is as we go through

333
00:18:17,483 --> 00:18:20,466
this and you get more and more commandlets, you're going to see

334
00:18:20,483 --> 00:18:24,233
that the way you're thinking about solving the problem is the

335
00:18:24,316 --> 00:18:27,466
way that you'll actually be building the commands in the pipeline.

336
00:18:28,233 --> 00:18:31,466
Now you don't have to do everything as a one-liner. And one-liners

337
00:18:31,483 --> 00:18:33,466
are great; we're going to do a lot of them in here. And we're

338
00:18:33,483 --> 00:18:38,466
also do scripting where a one-liner, when it's half the page,

339
00:18:38,483 --> 00:18:42,466
you're probably a little out of control at that point. But you

340
00:18:42,483 --> 00:18:48,466
can is the idea. Now before we go too much further into the pipeline,

341
00:18:48,483 --> 00:18:52,466
Jeffrey, let's do this. I've got a slide here so let me show

342
00:18:52,483 --> 00:18:53,466
everybody where were at.

343
00:18:54,483 --> 00:18:57,466
So, guys, make sure you're asking questions and all that kind

344
00:18:57,483 --> 00:19:00,216
of stuff. And for all the people out in the support, the MVP's

345
00:19:00,300 --> 00:19:03,466
and everybody who's is contributing, thank you so much for helping

346
00:19:03,483 --> 00:19:07,250
us out and answering all of these questions that are out there.

347
00:19:07,333 --> 00:19:10,466
Let's go into extending the shell a little bit. And this is

348
00:19:10,483 --> 00:19:14,466
a fascinating conversation for me because I can't remember the

349
00:19:14,483 --> 00:19:17,416
exact number but I think when PowerShell 1.0 came out I think

350
00:19:17,483 --> 00:19:21,466
there was like 192 commandlets. That's all we could do was like

351
00:19:21,483 --> 00:19:22,433
190 things.

352
00:19:22,450 --> 00:19:22,466
>> Yeah, yeah, yeah.

353
00:19:23,483 --> 00:19:25,466
>> Then PowerShell V2 came out and there was 236... well, there

354
00:19:25,483 --> 00:19:29,466
was only 236 things that we could do.

355
00:19:30,483 --> 00:19:35,466
But we need to do more than that. We need something that's extensible.

356
00:19:36,483 --> 00:19:40,450
So how do we get more than just the core PowerShell commandlets?

357
00:19:40,483 --> 00:19:42,466
Who's responsible for all of that kind of stuff?

358
00:19:42,483 --> 00:19:44,466
>> It takes a village, my friend. It takes a village.

359
00:19:44,483 --> 00:19:45,466
>> It takes a village.

360
00:19:46,250 --> 00:19:49,466
>> Yeah, so that's exactly the point. So the PowerShell team

361
00:19:49,483 --> 00:19:54,333
is responsible for the core PowerShell environment, the language, etcetera.

362
00:19:54,416 --> 00:19:58,466
And then, you have plug-ins or snap-ins or we now call them modules.

363
00:19:59,266 --> 00:20:00,283
And this is where...

364
00:20:01,483 --> 00:20:04,466
Trust me, you don't want me writing the Link commandlets, right?

365
00:20:04,483 --> 00:20:09,416
That doesn't end well. And so what we do is we create an environment

366
00:20:09,483 --> 00:20:12,466
where it's very easy for the individual feature teams to write

367
00:20:12,483 --> 00:20:16,400
their stuff and ship their stuff. And that's why when you say,

368
00:20:16,483 --> 00:20:20,450
"Oh, well, I want to do some stuff with PowerShell, where are

369
00:20:20,483 --> 00:20:22,466
the Link commandlets?" Well, do you have Link installed because

370
00:20:23,483 --> 00:20:25,333
if you don't have Link installed, you're not going to get the

371
00:20:25,483 --> 00:20:29,466
Link commandlets. So the idea is that the commandlets ship with

372
00:20:29,483 --> 00:20:33,466
the thing that needs to be managed. So we do this through modules.

373
00:20:34,483 --> 00:20:36,466
Originally they were snap-ins.

374
00:20:37,316 --> 00:20:40,466
So snap-ins and if you've got PowerShell Version 1 or PowerShell

375
00:20:40,483 --> 00:20:43,466
Version 2, you have these things called snap-ins. It turns out

376
00:20:43,483 --> 00:20:47,466
there were a number of limitations with snap-ins. The biggest:

377
00:20:47,166 --> 00:20:50,466
you had to be an administrator to get them installed and

378
00:20:51,483 --> 00:20:54,466
something else. Oh, you couldn't XCopy deploy them.

379
00:20:54,483 --> 00:20:55,433
>> Yeah.

380
00:20:55,483 --> 00:21:01,466
>> And modules is basically conceptually modeled after the module

381
00:21:01,483 --> 00:21:06,466
or the package modules of Pearl and Python and Ruby, but actually

382
00:21:06,483 --> 00:21:10,333
it's much richer than those, much richer than those. The idea

383
00:21:10,416 --> 00:21:13,466
is you'll be able to package up your stuff and then XCopy deploy

384
00:21:14,333 --> 00:21:16,466
it and then you import your modules.

385
00:21:16,483 --> 00:21:20,466
>> So let's take a look: first of all, what Jeffrey is saying...

386
00:21:20,483 --> 00:21:21,466
And I think

387
00:21:22,483 --> 00:21:27,166
all of you guys have run the MMC before and you know the MMC.

388
00:21:27,483 --> 00:21:32,466
You can file, add, remove, snap-in, and you get a list of stuff

389
00:21:32,200 --> 00:21:35,433
here that you can add in. I want you to notice on mine, I happen

390
00:21:35,483 --> 00:21:38,283
to have some of the Active Directory snap-ins. You guys know

391
00:21:38,366 --> 00:21:42,466
that in order to get those I had to install something. And in

392
00:21:42,483 --> 00:21:45,466
this case, I had installed the remote server administration tools

393
00:21:45,483 --> 00:21:49,466
to get the Active Directory ones. Well, it's the same concept

394
00:21:49,483 --> 00:21:52,466
when you're working with PowerShell. Do you have the product installed?

395
00:21:52,483 --> 00:21:56,283
Well, I have the remote server administration tools installed,

396
00:21:56,366 --> 00:21:59,466
and so I'm going to get those modules.

397
00:21:59,483 --> 00:22:03,466
Let me show you. PowerShell has a command called get-module.

398
00:22:05,483 --> 00:22:09,400
This'll show you what's currently loaded up. However, list available

399
00:22:09,483 --> 00:22:11,266
will show you the modules that are available. Now I need to

400
00:22:11,350 --> 00:22:15,466
just tell you right now, this is very confusing. In V2...

401
00:22:16,450 --> 00:22:16,466
>> Yeah.

402
00:22:16,483 --> 00:22:19,466
>> Yeah. In V2, first of all, you're not going to see what you're

403
00:22:19,483 --> 00:22:20,466
going to see on my screen.

404
00:22:22,483 --> 00:22:26,466
You're not going to see it in Windows 7 either. What you're

405
00:22:26,483 --> 00:22:30,466
seeing is Windows 8 running the Windows 8 remote server administration

406
00:22:30,483 --> 00:22:33,466
tools, and I get more modules than you do.

407
00:22:33,483 --> 00:22:34,466
>> Because he's cool.

408
00:22:34,483 --> 00:22:37,466
>> Well, not because I'm cool, because I've upgraded.

409
00:22:38,483 --> 00:22:41,466
So I know you're corporate standard, you may not be doing it

410
00:22:41,483 --> 00:22:46,466
yet, but your admin box needs to be running V3. And as you're

411
00:22:46,483 --> 00:22:50,466
going to want, it needs to be running Windows 8. Okay? But at

412
00:22:50,483 --> 00:22:54,466
any rate let me just show you. And I'm not the guy that works

413
00:22:54,483 --> 00:22:56,466
for Microsoft and I'm the one over here.

414
00:22:58,333 --> 00:23:02,466
So you can see, I get this giant list of modules. And notice

415
00:23:02,483 --> 00:23:04,466
one of the modules at the very top here is called Active Directory.

416
00:23:05,0 --> 00:23:07,466
The reason I have the module is because I installed the remote

417
00:23:07,483 --> 00:23:12,0
server administration tools. Here's what that module contains: commandlets.

418
00:23:12,450 --> 00:23:12,466
Commandlets that

419
00:23:13,483 --> 00:23:15,466
let me manage Active Directory.

420
00:23:15,483 --> 00:23:16,300
>> And providers.

421
00:23:16,383 --> 00:23:16,466
>> And what?

422
00:23:16,483 --> 00:23:17,466
>> And providers. But we didn't tell them...

423
00:23:17,483 --> 00:23:18,466
>> And providers.

424
00:23:18,483 --> 00:23:19,466
>> ...about providers.

425
00:23:19,483 --> 00:23:21,466
>> We haven't talked about providers yet but, yes, and providers.

426
00:23:22,483 --> 00:23:26,333
If you have a module with commandlets, here's the beautiful thing

427
00:23:26,416 --> 00:23:29,466
about PowerShell V3... You're going to love this... when you

428
00:23:29,200 --> 00:23:30,283
use get-help,

429
00:23:31,483 --> 00:23:33,466
get-help knows how to look through those modules even if they're

430
00:23:33,483 --> 00:23:38,466
not loaded. So get-help, I want you to show me do I have any

431
00:23:38,483 --> 00:23:40,466
Active Directory commandlets?

432
00:23:40,483 --> 00:23:44,466
I want you to notice that, yes, there are a lot of things with

433
00:23:44,483 --> 00:23:46,466
AD in it and I could've refined the search better, but that's

434
00:23:47,483 --> 00:23:50,400
kind of my point. I want you to see that there's a whole bunch

435
00:23:50,483 --> 00:23:54,466
of AD commandlets here. You'll recognize AD computer as this'll

436
00:23:55,0 --> 00:23:57,466
give me Active Directory computers.

437
00:23:57,483 --> 00:24:03,466
The get-help knows how to look into these modules, find these

438
00:24:03,183 --> 00:24:06,466
commandlets to show them, so you still have complete discoverability.

439
00:24:06,483 --> 00:24:11,216
And when you want help on the command that you found, get-help

440
00:24:12,233 --> 00:24:17,466
get-AD computer, it'll give you the help for it. When you try

441
00:24:17,483 --> 00:24:21,333
to use the commandlet... This is one of the biggest features

442
00:24:21,483 --> 00:24:23,466
for me personally in V3...

443
00:24:23,483 --> 00:24:28,466
And I think I may have used this one earlier so you may not see

444
00:24:28,483 --> 00:24:31,266
it flashing on my screen but take a look.

445
00:24:31,350 --> 00:24:35,166
Oop, it just ran. But let me do this. I'm going to close my

446
00:24:35,250 --> 00:24:37,466
console and re-open it because I want you to see this if you

447
00:24:37,483 --> 00:24:39,466
can catch it on my screen real quick.

448
00:24:39,483 --> 00:24:43,466
>> Actually, the other way to do this is to do a get-module.

449
00:24:46,216 --> 00:24:46,466
Get-module.

450
00:24:46,483 --> 00:24:49,466
>> Okay, let's do that. We're going to do get-module.

451
00:24:51,483 --> 00:24:52,466
>> Carriage return.

452
00:24:53,383 --> 00:24:55,466
So these are the currently loaded modules.

453
00:24:55,483 --> 00:24:56,466
>> Oh yeah. Right. These are the currently loaded ones.

454
00:24:56,483 --> 00:24:58,333
>> Yeah, so now do it and then you'll...

455
00:24:58,416 --> 00:25:00,466
>> And now, yes, thank you. Thank you. So these are the currently

456
00:25:00,483 --> 00:25:02,383
loaded ones. Now watch what I'm going to do. I'm going to do

457
00:25:02,466 --> 00:25:07,466
get-AD computer and watch what flashes across my screen real quick.

458
00:25:07,233 --> 00:25:09,466
Boy, that was real quick. I don't know if you caught it. It actually

459
00:25:10,166 --> 00:25:13,466
dynamically loaded the module for me so that I had the commandlets.

460
00:25:14,483 --> 00:25:15,466
And notice, the commandlet ran.

461
00:25:16,266 --> 00:25:18,466
I didn't have to do anything special. The reason I'm making

462
00:25:18,483 --> 00:25:21,466
a big deal about this... And here I'll show you in get-module.

463
00:25:21,483 --> 00:25:25,466
Now you'll see that it automatically loaded the Active Directory

464
00:25:25,483 --> 00:25:28,466
module for me. The reason I'm making a big deal about this, in

465
00:25:28,483 --> 00:25:32,216
V2, you're life sucks because it doesn't work this way. And let

466
00:25:32,300 --> 00:25:37,466
me tell you, I'm sorry, sir, but in V2 this was painful.

467
00:25:37,483 --> 00:25:40,466
Because in V2 get-help would not find the commandlets unless

468
00:25:40,483 --> 00:25:42,433
the module was imported.

469
00:25:42,450 --> 00:25:42,466
>> Yes.

470
00:25:42,483 --> 00:25:47,466
>> So you had to know what the module was first then import then

471
00:25:47,483 --> 00:25:50,466
you could discover. See, it didn't quite work. They fixed all

472
00:25:51,483 --> 00:25:55,383
that with V3. Now it works just like I need it to work. And when

473
00:25:55,466 --> 00:25:59,250
I run the command, the module loads. So I'm not loading modules unnecessarily.

474
00:25:59,333 --> 00:25:59,466
>> Yep.

475
00:25:59,483 --> 00:26:03,466
>> And if I'm writing scripts that are using the commands, it

476
00:26:03,483 --> 00:26:06,466
just loads what it needs and I don't have to worry about it.

477
00:26:06,483 --> 00:26:07,466
>> It's a beautiful world.

478
00:26:07,483 --> 00:26:11,466
>> It's a beautiful world. You got any more on modules because

479
00:26:11,483 --> 00:26:13,466
that's about all I've got on modules?

480
00:26:13,483 --> 00:26:16,466
>> Well, you can do... Do we get to this now?

481
00:26:16,483 --> 00:26:18,216
>> What do you want to do?

482
00:26:18,300 --> 00:26:20,466
>> Modules on other machines, implicit remoting? No.

483
00:26:20,483 --> 00:26:22,466
>> Oh no, we'll do implicit... Oh, boy, what he's going to talk about.

484
00:26:22,483 --> 00:26:23,466
But, yeah. >> Yeah.

485
00:26:23,216 --> 00:26:24,216
>> We'll get to that later, yeah.

486
00:26:24,300 --> 00:26:25,466
>> It's so cool. It's so cool.

487
00:26:25,483 --> 00:26:28,466
>> It's so cool. So let me show the slides, guys. We've got all this...

488
00:26:28,483 --> 00:26:29,466
>> Yeah, that's an after lunch thing.

489
00:26:30,483 --> 00:26:31,466
>> They'll need like high energy.

490
00:26:32,333 --> 00:26:34,466
>> And let me just warn you right now because we're only about

491
00:26:34,216 --> 00:26:38,466
30 minutes or so away from taking a meal break. A meal break, yeah.

492
00:26:38,483 --> 00:26:40,366
>> That's the international term for lunch.

493
00:26:40,383 --> 00:26:40,466
>> Yeah. >> Meal.

494
00:26:40,483 --> 00:26:45,466
>> Because we're taking lunch. Is that don't eat a lot because

495
00:26:45,483 --> 00:26:48,383
you don't want to fall asleep after lunch.

496
00:26:48,466 --> 00:26:49,466
>> Have some coffee.

497
00:26:49,483 --> 00:26:51,466
>> Have some coffee. So we've got everything in the slides.

498
00:26:51,483 --> 00:26:56,466
And PowerShell 3 dynamically loads the modules for you. And you

499
00:26:56,483 --> 00:26:59,466
can discover all of your commands. Thank God for V3, makes this

500
00:26:59,483 --> 00:27:05,466
much easier. And so you can work with your commands and off you go.

